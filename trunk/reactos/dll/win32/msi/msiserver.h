/*** Autogenerated by WIDL 1.3.35 from msiserver.idl - Do not edit ***/

#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif

#include <rpc.h>
#include <rpcndr.h>

#if !defined(COM_NO_WINDOWS_H) && !defined(__WINESRC__)
#include <windows.h>
#include <ole2.h>
#endif

#ifndef __WIDL_MSISERVER_H
#define __WIDL_MSISERVER_H

/* Forward declarations */

#ifndef __IWineMsiRemoteDatabase_FWD_DEFINED__
#define __IWineMsiRemoteDatabase_FWD_DEFINED__
typedef interface IWineMsiRemoteDatabase IWineMsiRemoteDatabase;
#endif

#ifndef __IWineMsiRemotePackage_FWD_DEFINED__
#define __IWineMsiRemotePackage_FWD_DEFINED__
typedef interface IWineMsiRemotePackage IWineMsiRemotePackage;
#endif

#ifndef __IWineMsiRemoteCustomAction_FWD_DEFINED__
#define __IWineMsiRemoteCustomAction_FWD_DEFINED__
typedef interface IWineMsiRemoteCustomAction IWineMsiRemoteCustomAction;
#endif

#ifndef __IMsiServer_FWD_DEFINED__
#define __IMsiServer_FWD_DEFINED__
typedef interface IMsiServer IMsiServer;
#endif

#ifndef __IMsiMessage_FWD_DEFINED__
#define __IMsiMessage_FWD_DEFINED__
typedef interface IMsiMessage IMsiMessage;
#endif

#ifndef __IMsiCustomAction_FWD_DEFINED__
#define __IMsiCustomAction_FWD_DEFINED__
typedef interface IMsiCustomAction IMsiCustomAction;
#endif

#ifndef __IMsiRemoteAPI_FWD_DEFINED__
#define __IMsiRemoteAPI_FWD_DEFINED__
typedef interface IMsiRemoteAPI IMsiRemoteAPI;
#endif

#ifndef __MsiServer_FWD_DEFINED__
#define __MsiServer_FWD_DEFINED__
typedef struct MsiServer MsiServer;
#endif /* defined __MsiServer_FWD_DEFINED__ */

#ifndef __MsiServerMessage_FWD_DEFINED__
#define __MsiServerMessage_FWD_DEFINED__
typedef struct MsiServerMessage MsiServerMessage;
#endif /* defined __MsiServerMessage_FWD_DEFINED__ */

#ifndef __PSFactoryBuffer_FWD_DEFINED__
#define __PSFactoryBuffer_FWD_DEFINED__
typedef struct PSFactoryBuffer PSFactoryBuffer;
#endif /* defined __PSFactoryBuffer_FWD_DEFINED__ */

#ifndef __MsiTransform_FWD_DEFINED__
#define __MsiTransform_FWD_DEFINED__
typedef struct MsiTransform MsiTransform;
#endif /* defined __MsiTransform_FWD_DEFINED__ */

#ifndef __MsiDatabase_FWD_DEFINED__
#define __MsiDatabase_FWD_DEFINED__
typedef struct MsiDatabase MsiDatabase;
#endif /* defined __MsiDatabase_FWD_DEFINED__ */

#ifndef __MsiPatch_FWD_DEFINED__
#define __MsiPatch_FWD_DEFINED__
typedef struct MsiPatch MsiPatch;
#endif /* defined __MsiPatch_FWD_DEFINED__ */

#ifndef __MsiServerX3_FWD_DEFINED__
#define __MsiServerX3_FWD_DEFINED__
typedef struct MsiServerX3 MsiServerX3;
#endif /* defined __MsiServerX3_FWD_DEFINED__ */

#ifndef __WineMsiRemoteCustomAction_FWD_DEFINED__
#define __WineMsiRemoteCustomAction_FWD_DEFINED__
typedef struct WineMsiRemoteCustomAction WineMsiRemoteCustomAction;
#endif /* defined __WineMsiRemoteCustomAction_FWD_DEFINED__ */

#ifndef __WineMsiRemotePackage_FWD_DEFINED__
#define __WineMsiRemotePackage_FWD_DEFINED__
typedef struct WineMsiRemotePackage WineMsiRemotePackage;
#endif /* defined __WineMsiRemotePackage_FWD_DEFINED__ */

#ifndef __Installer_FWD_DEFINED__
#define __Installer_FWD_DEFINED__
typedef interface Installer Installer;
#endif

#ifndef __Record_FWD_DEFINED__
#define __Record_FWD_DEFINED__
typedef interface Record Record;
#endif

#ifndef __StringList_FWD_DEFINED__
#define __StringList_FWD_DEFINED__
typedef interface StringList StringList;
#endif

#ifndef __RecordList_FWD_DEFINED__
#define __RecordList_FWD_DEFINED__
typedef interface RecordList RecordList;
#endif

#ifndef __UIPreview_FWD_DEFINED__
#define __UIPreview_FWD_DEFINED__
typedef interface UIPreview UIPreview;
#endif

#ifndef __SummaryInfo_FWD_DEFINED__
#define __SummaryInfo_FWD_DEFINED__
typedef interface SummaryInfo SummaryInfo;
#endif

#ifndef __View_FWD_DEFINED__
#define __View_FWD_DEFINED__
typedef interface View View;
#endif

#ifndef __Database_FWD_DEFINED__
#define __Database_FWD_DEFINED__
typedef interface Database Database;
#endif

#ifndef __Session_FWD_DEFINED__
#define __Session_FWD_DEFINED__
typedef interface Session Session;
#endif

#ifndef __FeatureInfo_FWD_DEFINED__
#define __FeatureInfo_FWD_DEFINED__
typedef interface FeatureInfo FeatureInfo;
#endif

#ifndef __Product_FWD_DEFINED__
#define __Product_FWD_DEFINED__
typedef interface Product Product;
#endif

#ifndef __Patch_FWD_DEFINED__
#define __Patch_FWD_DEFINED__
typedef interface Patch Patch;
#endif

#ifndef __MsiInstaller_FWD_DEFINED__
#define __MsiInstaller_FWD_DEFINED__
typedef struct MsiInstaller MsiInstaller;
#endif /* defined __MsiInstaller_FWD_DEFINED__ */

/* Headers for imported files */

#include <unknwn.h>
#include <wtypes.h>
#include <objidl.h>
#include <oaidl.h>

#ifdef __cplusplus
extern "C" {
#endif

#if 0
typedef ULONG MSIHANDLE;
typedef int INSTALLMESSAGE;
typedef int MSICONDITION;
typedef int MSIRUNMODE;
typedef int INSTALLSTATE;
#endif
/*****************************************************************************
 * IWineMsiRemoteDatabase interface
 */
#ifndef __IWineMsiRemoteDatabase_INTERFACE_DEFINED__
#define __IWineMsiRemoteDatabase_INTERFACE_DEFINED__

DEFINE_GUID(IID_IWineMsiRemoteDatabase, 0x7bde2046, 0xd03b, 0x4ffc, 0xb8,0x4c, 0xa0,0x98,0xf3,0x8c,0xff,0x0b);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("7bde2046-d03b-4ffc-b84c-a098f38cff0b")
IWineMsiRemoteDatabase : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE IsTablePersistent(
        LPCWSTR table,
        MSICONDITION *persistent) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetPrimaryKeys(
        LPCWSTR table,
        MSIHANDLE *keys) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetSummaryInformation(
        UINT updatecount,
        MSIHANDLE *suminfo) = 0;

    virtual HRESULT STDMETHODCALLTYPE OpenView(
        LPCWSTR query,
        MSIHANDLE *view) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetMsiHandle(
        MSIHANDLE handle) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IWineMsiRemoteDatabase, 0x7bde2046, 0xd03b, 0x4ffc, 0xb8,0x4c, 0xa0,0x98,0xf3,0x8c,0xff,0x0b)
#endif
#else
typedef struct IWineMsiRemoteDatabaseVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IWineMsiRemoteDatabase* This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IWineMsiRemoteDatabase* This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IWineMsiRemoteDatabase* This);

    /*** IWineMsiRemoteDatabase methods ***/
    HRESULT (STDMETHODCALLTYPE *IsTablePersistent)(
        IWineMsiRemoteDatabase* This,
        LPCWSTR table,
        MSICONDITION *persistent);

    HRESULT (STDMETHODCALLTYPE *GetPrimaryKeys)(
        IWineMsiRemoteDatabase* This,
        LPCWSTR table,
        MSIHANDLE *keys);

    HRESULT (STDMETHODCALLTYPE *GetSummaryInformation)(
        IWineMsiRemoteDatabase* This,
        UINT updatecount,
        MSIHANDLE *suminfo);

    HRESULT (STDMETHODCALLTYPE *OpenView)(
        IWineMsiRemoteDatabase* This,
        LPCWSTR query,
        MSIHANDLE *view);

    HRESULT (STDMETHODCALLTYPE *SetMsiHandle)(
        IWineMsiRemoteDatabase* This,
        MSIHANDLE handle);

    END_INTERFACE
} IWineMsiRemoteDatabaseVtbl;
interface IWineMsiRemoteDatabase {
    CONST_VTBL IWineMsiRemoteDatabaseVtbl* lpVtbl;
};

#ifdef COBJMACROS
/*** IUnknown methods ***/
#define IWineMsiRemoteDatabase_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IWineMsiRemoteDatabase_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IWineMsiRemoteDatabase_Release(This) (This)->lpVtbl->Release(This)
/*** IWineMsiRemoteDatabase methods ***/
#define IWineMsiRemoteDatabase_IsTablePersistent(This,table,persistent) (This)->lpVtbl->IsTablePersistent(This,table,persistent)
#define IWineMsiRemoteDatabase_GetPrimaryKeys(This,table,keys) (This)->lpVtbl->GetPrimaryKeys(This,table,keys)
#define IWineMsiRemoteDatabase_GetSummaryInformation(This,updatecount,suminfo) (This)->lpVtbl->GetSummaryInformation(This,updatecount,suminfo)
#define IWineMsiRemoteDatabase_OpenView(This,query,view) (This)->lpVtbl->OpenView(This,query,view)
#define IWineMsiRemoteDatabase_SetMsiHandle(This,handle) (This)->lpVtbl->SetMsiHandle(This,handle)
#endif

#endif

HRESULT STDMETHODCALLTYPE IWineMsiRemoteDatabase_IsTablePersistent_Proxy(
    IWineMsiRemoteDatabase* This,
    LPCWSTR table,
    MSICONDITION *persistent);
void __RPC_STUB IWineMsiRemoteDatabase_IsTablePersistent_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IWineMsiRemoteDatabase_GetPrimaryKeys_Proxy(
    IWineMsiRemoteDatabase* This,
    LPCWSTR table,
    MSIHANDLE *keys);
void __RPC_STUB IWineMsiRemoteDatabase_GetPrimaryKeys_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IWineMsiRemoteDatabase_GetSummaryInformation_Proxy(
    IWineMsiRemoteDatabase* This,
    UINT updatecount,
    MSIHANDLE *suminfo);
void __RPC_STUB IWineMsiRemoteDatabase_GetSummaryInformation_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IWineMsiRemoteDatabase_OpenView_Proxy(
    IWineMsiRemoteDatabase* This,
    LPCWSTR query,
    MSIHANDLE *view);
void __RPC_STUB IWineMsiRemoteDatabase_OpenView_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IWineMsiRemoteDatabase_SetMsiHandle_Proxy(
    IWineMsiRemoteDatabase* This,
    MSIHANDLE handle);
void __RPC_STUB IWineMsiRemoteDatabase_SetMsiHandle_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);

#endif  /* __IWineMsiRemoteDatabase_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IWineMsiRemotePackage interface
 */
#ifndef __IWineMsiRemotePackage_INTERFACE_DEFINED__
#define __IWineMsiRemotePackage_INTERFACE_DEFINED__

DEFINE_GUID(IID_IWineMsiRemotePackage, 0x902b3592, 0x9d08, 0x4dfd, 0xa5,0x93, 0xd0,0x7c,0x52,0x54,0x64,0x21);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("902b3592-9d08-4dfd-a593-d07c52546421")
IWineMsiRemotePackage : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE SetMsiHandle(
        MSIHANDLE handle) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetActiveDatabase(
        MSIHANDLE *handle) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetProperty(
        BSTR property,
        BSTR value,
        DWORD *size) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetProperty(
        BSTR property,
        BSTR value) = 0;

    virtual HRESULT STDMETHODCALLTYPE ProcessMessage(
        INSTALLMESSAGE message,
        MSIHANDLE record) = 0;

    virtual HRESULT STDMETHODCALLTYPE DoAction(
        BSTR action) = 0;

    virtual HRESULT STDMETHODCALLTYPE Sequence(
        BSTR table,
        int sequence) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetTargetPath(
        BSTR folder,
        BSTR value,
        DWORD *size) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetTargetPath(
        BSTR folder,
        BSTR value) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetSourcePath(
        BSTR folder,
        BSTR value,
        DWORD *size) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetMode(
        MSIRUNMODE mode,
        BOOL *ret) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetMode(
        MSIRUNMODE mode,
        BOOL state) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetFeatureState(
        BSTR feature,
        INSTALLSTATE *installed,
        INSTALLSTATE *action) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetFeatureState(
        BSTR feature,
        INSTALLSTATE state) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetComponentState(
        BSTR component,
        INSTALLSTATE *installed,
        INSTALLSTATE *action) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetComponentState(
        BSTR component,
        INSTALLSTATE state) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetLanguage(
        LANGID *language) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetInstallLevel(
        int level) = 0;

    virtual HRESULT STDMETHODCALLTYPE FormatRecord(
        MSIHANDLE record,
        BSTR *value) = 0;

    virtual HRESULT STDMETHODCALLTYPE EvaluateCondition(
        BSTR condition) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetFeatureCost(
        BSTR feature,
        INT cost_tree,
        INSTALLSTATE state,
        INT *cost) = 0;

    virtual HRESULT STDMETHODCALLTYPE EnumComponentCosts(
        BSTR component,
        DWORD index,
        INSTALLSTATE state,
        BSTR drive,
        DWORD *buflen,
        INT *cost,
        INT *temp) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IWineMsiRemotePackage, 0x902b3592, 0x9d08, 0x4dfd, 0xa5,0x93, 0xd0,0x7c,0x52,0x54,0x64,0x21)
#endif
#else
typedef struct IWineMsiRemotePackageVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IWineMsiRemotePackage* This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IWineMsiRemotePackage* This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IWineMsiRemotePackage* This);

    /*** IWineMsiRemotePackage methods ***/
    HRESULT (STDMETHODCALLTYPE *SetMsiHandle)(
        IWineMsiRemotePackage* This,
        MSIHANDLE handle);

    HRESULT (STDMETHODCALLTYPE *GetActiveDatabase)(
        IWineMsiRemotePackage* This,
        MSIHANDLE *handle);

    HRESULT (STDMETHODCALLTYPE *GetProperty)(
        IWineMsiRemotePackage* This,
        BSTR property,
        BSTR value,
        DWORD *size);

    HRESULT (STDMETHODCALLTYPE *SetProperty)(
        IWineMsiRemotePackage* This,
        BSTR property,
        BSTR value);

    HRESULT (STDMETHODCALLTYPE *ProcessMessage)(
        IWineMsiRemotePackage* This,
        INSTALLMESSAGE message,
        MSIHANDLE record);

    HRESULT (STDMETHODCALLTYPE *DoAction)(
        IWineMsiRemotePackage* This,
        BSTR action);

    HRESULT (STDMETHODCALLTYPE *Sequence)(
        IWineMsiRemotePackage* This,
        BSTR table,
        int sequence);

    HRESULT (STDMETHODCALLTYPE *GetTargetPath)(
        IWineMsiRemotePackage* This,
        BSTR folder,
        BSTR value,
        DWORD *size);

    HRESULT (STDMETHODCALLTYPE *SetTargetPath)(
        IWineMsiRemotePackage* This,
        BSTR folder,
        BSTR value);

    HRESULT (STDMETHODCALLTYPE *GetSourcePath)(
        IWineMsiRemotePackage* This,
        BSTR folder,
        BSTR value,
        DWORD *size);

    HRESULT (STDMETHODCALLTYPE *GetMode)(
        IWineMsiRemotePackage* This,
        MSIRUNMODE mode,
        BOOL *ret);

    HRESULT (STDMETHODCALLTYPE *SetMode)(
        IWineMsiRemotePackage* This,
        MSIRUNMODE mode,
        BOOL state);

    HRESULT (STDMETHODCALLTYPE *GetFeatureState)(
        IWineMsiRemotePackage* This,
        BSTR feature,
        INSTALLSTATE *installed,
        INSTALLSTATE *action);

    HRESULT (STDMETHODCALLTYPE *SetFeatureState)(
        IWineMsiRemotePackage* This,
        BSTR feature,
        INSTALLSTATE state);

    HRESULT (STDMETHODCALLTYPE *GetComponentState)(
        IWineMsiRemotePackage* This,
        BSTR component,
        INSTALLSTATE *installed,
        INSTALLSTATE *action);

    HRESULT (STDMETHODCALLTYPE *SetComponentState)(
        IWineMsiRemotePackage* This,
        BSTR component,
        INSTALLSTATE state);

    HRESULT (STDMETHODCALLTYPE *GetLanguage)(
        IWineMsiRemotePackage* This,
        LANGID *language);

    HRESULT (STDMETHODCALLTYPE *SetInstallLevel)(
        IWineMsiRemotePackage* This,
        int level);

    HRESULT (STDMETHODCALLTYPE *FormatRecord)(
        IWineMsiRemotePackage* This,
        MSIHANDLE record,
        BSTR *value);

    HRESULT (STDMETHODCALLTYPE *EvaluateCondition)(
        IWineMsiRemotePackage* This,
        BSTR condition);

    HRESULT (STDMETHODCALLTYPE *GetFeatureCost)(
        IWineMsiRemotePackage* This,
        BSTR feature,
        INT cost_tree,
        INSTALLSTATE state,
        INT *cost);

    HRESULT (STDMETHODCALLTYPE *EnumComponentCosts)(
        IWineMsiRemotePackage* This,
        BSTR component,
        DWORD index,
        INSTALLSTATE state,
        BSTR drive,
        DWORD *buflen,
        INT *cost,
        INT *temp);

    END_INTERFACE
} IWineMsiRemotePackageVtbl;
interface IWineMsiRemotePackage {
    CONST_VTBL IWineMsiRemotePackageVtbl* lpVtbl;
};

#ifdef COBJMACROS
/*** IUnknown methods ***/
#define IWineMsiRemotePackage_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IWineMsiRemotePackage_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IWineMsiRemotePackage_Release(This) (This)->lpVtbl->Release(This)
/*** IWineMsiRemotePackage methods ***/
#define IWineMsiRemotePackage_SetMsiHandle(This,handle) (This)->lpVtbl->SetMsiHandle(This,handle)
#define IWineMsiRemotePackage_GetActiveDatabase(This,handle) (This)->lpVtbl->GetActiveDatabase(This,handle)
#define IWineMsiRemotePackage_GetProperty(This,property,value,size) (This)->lpVtbl->GetProperty(This,property,value,size)
#define IWineMsiRemotePackage_SetProperty(This,property,value) (This)->lpVtbl->SetProperty(This,property,value)
#define IWineMsiRemotePackage_ProcessMessage(This,message,record) (This)->lpVtbl->ProcessMessage(This,message,record)
#define IWineMsiRemotePackage_DoAction(This,action) (This)->lpVtbl->DoAction(This,action)
#define IWineMsiRemotePackage_Sequence(This,table,sequence) (This)->lpVtbl->Sequence(This,table,sequence)
#define IWineMsiRemotePackage_GetTargetPath(This,folder,value,size) (This)->lpVtbl->GetTargetPath(This,folder,value,size)
#define IWineMsiRemotePackage_SetTargetPath(This,folder,value) (This)->lpVtbl->SetTargetPath(This,folder,value)
#define IWineMsiRemotePackage_GetSourcePath(This,folder,value,size) (This)->lpVtbl->GetSourcePath(This,folder,value,size)
#define IWineMsiRemotePackage_GetMode(This,mode,ret) (This)->lpVtbl->GetMode(This,mode,ret)
#define IWineMsiRemotePackage_SetMode(This,mode,state) (This)->lpVtbl->SetMode(This,mode,state)
#define IWineMsiRemotePackage_GetFeatureState(This,feature,installed,action) (This)->lpVtbl->GetFeatureState(This,feature,installed,action)
#define IWineMsiRemotePackage_SetFeatureState(This,feature,state) (This)->lpVtbl->SetFeatureState(This,feature,state)
#define IWineMsiRemotePackage_GetComponentState(This,component,installed,action) (This)->lpVtbl->GetComponentState(This,component,installed,action)
#define IWineMsiRemotePackage_SetComponentState(This,component,state) (This)->lpVtbl->SetComponentState(This,component,state)
#define IWineMsiRemotePackage_GetLanguage(This,language) (This)->lpVtbl->GetLanguage(This,language)
#define IWineMsiRemotePackage_SetInstallLevel(This,level) (This)->lpVtbl->SetInstallLevel(This,level)
#define IWineMsiRemotePackage_FormatRecord(This,record,value) (This)->lpVtbl->FormatRecord(This,record,value)
#define IWineMsiRemotePackage_EvaluateCondition(This,condition) (This)->lpVtbl->EvaluateCondition(This,condition)
#define IWineMsiRemotePackage_GetFeatureCost(This,feature,cost_tree,state,cost) (This)->lpVtbl->GetFeatureCost(This,feature,cost_tree,state,cost)
#define IWineMsiRemotePackage_EnumComponentCosts(This,component,index,state,drive,buflen,cost,temp) (This)->lpVtbl->EnumComponentCosts(This,component,index,state,drive,buflen,cost,temp)
#endif

#endif

HRESULT STDMETHODCALLTYPE IWineMsiRemotePackage_SetMsiHandle_Proxy(
    IWineMsiRemotePackage* This,
    MSIHANDLE handle);
void __RPC_STUB IWineMsiRemotePackage_SetMsiHandle_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IWineMsiRemotePackage_GetActiveDatabase_Proxy(
    IWineMsiRemotePackage* This,
    MSIHANDLE *handle);
void __RPC_STUB IWineMsiRemotePackage_GetActiveDatabase_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IWineMsiRemotePackage_GetProperty_Proxy(
    IWineMsiRemotePackage* This,
    BSTR property,
    BSTR value,
    DWORD *size);
void __RPC_STUB IWineMsiRemotePackage_GetProperty_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IWineMsiRemotePackage_SetProperty_Proxy(
    IWineMsiRemotePackage* This,
    BSTR property,
    BSTR value);
void __RPC_STUB IWineMsiRemotePackage_SetProperty_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IWineMsiRemotePackage_ProcessMessage_Proxy(
    IWineMsiRemotePackage* This,
    INSTALLMESSAGE message,
    MSIHANDLE record);
void __RPC_STUB IWineMsiRemotePackage_ProcessMessage_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IWineMsiRemotePackage_DoAction_Proxy(
    IWineMsiRemotePackage* This,
    BSTR action);
void __RPC_STUB IWineMsiRemotePackage_DoAction_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IWineMsiRemotePackage_Sequence_Proxy(
    IWineMsiRemotePackage* This,
    BSTR table,
    int sequence);
void __RPC_STUB IWineMsiRemotePackage_Sequence_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IWineMsiRemotePackage_GetTargetPath_Proxy(
    IWineMsiRemotePackage* This,
    BSTR folder,
    BSTR value,
    DWORD *size);
void __RPC_STUB IWineMsiRemotePackage_GetTargetPath_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IWineMsiRemotePackage_SetTargetPath_Proxy(
    IWineMsiRemotePackage* This,
    BSTR folder,
    BSTR value);
void __RPC_STUB IWineMsiRemotePackage_SetTargetPath_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IWineMsiRemotePackage_GetSourcePath_Proxy(
    IWineMsiRemotePackage* This,
    BSTR folder,
    BSTR value,
    DWORD *size);
void __RPC_STUB IWineMsiRemotePackage_GetSourcePath_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IWineMsiRemotePackage_GetMode_Proxy(
    IWineMsiRemotePackage* This,
    MSIRUNMODE mode,
    BOOL *ret);
void __RPC_STUB IWineMsiRemotePackage_GetMode_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IWineMsiRemotePackage_SetMode_Proxy(
    IWineMsiRemotePackage* This,
    MSIRUNMODE mode,
    BOOL state);
void __RPC_STUB IWineMsiRemotePackage_SetMode_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IWineMsiRemotePackage_GetFeatureState_Proxy(
    IWineMsiRemotePackage* This,
    BSTR feature,
    INSTALLSTATE *installed,
    INSTALLSTATE *action);
void __RPC_STUB IWineMsiRemotePackage_GetFeatureState_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IWineMsiRemotePackage_SetFeatureState_Proxy(
    IWineMsiRemotePackage* This,
    BSTR feature,
    INSTALLSTATE state);
void __RPC_STUB IWineMsiRemotePackage_SetFeatureState_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IWineMsiRemotePackage_GetComponentState_Proxy(
    IWineMsiRemotePackage* This,
    BSTR component,
    INSTALLSTATE *installed,
    INSTALLSTATE *action);
void __RPC_STUB IWineMsiRemotePackage_GetComponentState_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IWineMsiRemotePackage_SetComponentState_Proxy(
    IWineMsiRemotePackage* This,
    BSTR component,
    INSTALLSTATE state);
void __RPC_STUB IWineMsiRemotePackage_SetComponentState_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IWineMsiRemotePackage_GetLanguage_Proxy(
    IWineMsiRemotePackage* This,
    LANGID *language);
void __RPC_STUB IWineMsiRemotePackage_GetLanguage_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IWineMsiRemotePackage_SetInstallLevel_Proxy(
    IWineMsiRemotePackage* This,
    int level);
void __RPC_STUB IWineMsiRemotePackage_SetInstallLevel_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IWineMsiRemotePackage_FormatRecord_Proxy(
    IWineMsiRemotePackage* This,
    MSIHANDLE record,
    BSTR *value);
void __RPC_STUB IWineMsiRemotePackage_FormatRecord_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IWineMsiRemotePackage_EvaluateCondition_Proxy(
    IWineMsiRemotePackage* This,
    BSTR condition);
void __RPC_STUB IWineMsiRemotePackage_EvaluateCondition_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IWineMsiRemotePackage_GetFeatureCost_Proxy(
    IWineMsiRemotePackage* This,
    BSTR feature,
    INT cost_tree,
    INSTALLSTATE state,
    INT *cost);
void __RPC_STUB IWineMsiRemotePackage_GetFeatureCost_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IWineMsiRemotePackage_EnumComponentCosts_Proxy(
    IWineMsiRemotePackage* This,
    BSTR component,
    DWORD index,
    INSTALLSTATE state,
    BSTR drive,
    DWORD *buflen,
    INT *cost,
    INT *temp);
void __RPC_STUB IWineMsiRemotePackage_EnumComponentCosts_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);

#endif  /* __IWineMsiRemotePackage_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IWineMsiRemoteCustomAction interface
 */
#ifndef __IWineMsiRemoteCustomAction_INTERFACE_DEFINED__
#define __IWineMsiRemoteCustomAction_INTERFACE_DEFINED__

DEFINE_GUID(IID_IWineMsiRemoteCustomAction, 0x56d58b64, 0x8780, 0x4c22, 0xa8,0xbc, 0x8b,0x0b,0x29,0xe4,0xa9,0xf8);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("56d58b64-8780-4c22-a8bc-8b0b29e4a9f8")
IWineMsiRemoteCustomAction : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE GetActionInfo(
        LPCGUID guid,
        INT *type,
        MSIHANDLE *handle,
        BSTR *dllname,
        BSTR *function,
        IWineMsiRemotePackage **package) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IWineMsiRemoteCustomAction, 0x56d58b64, 0x8780, 0x4c22, 0xa8,0xbc, 0x8b,0x0b,0x29,0xe4,0xa9,0xf8)
#endif
#else
typedef struct IWineMsiRemoteCustomActionVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IWineMsiRemoteCustomAction* This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IWineMsiRemoteCustomAction* This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IWineMsiRemoteCustomAction* This);

    /*** IWineMsiRemoteCustomAction methods ***/
    HRESULT (STDMETHODCALLTYPE *GetActionInfo)(
        IWineMsiRemoteCustomAction* This,
        LPCGUID guid,
        INT *type,
        MSIHANDLE *handle,
        BSTR *dllname,
        BSTR *function,
        IWineMsiRemotePackage **package);

    END_INTERFACE
} IWineMsiRemoteCustomActionVtbl;
interface IWineMsiRemoteCustomAction {
    CONST_VTBL IWineMsiRemoteCustomActionVtbl* lpVtbl;
};

#ifdef COBJMACROS
/*** IUnknown methods ***/
#define IWineMsiRemoteCustomAction_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IWineMsiRemoteCustomAction_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IWineMsiRemoteCustomAction_Release(This) (This)->lpVtbl->Release(This)
/*** IWineMsiRemoteCustomAction methods ***/
#define IWineMsiRemoteCustomAction_GetActionInfo(This,guid,type,handle,dllname,function,package) (This)->lpVtbl->GetActionInfo(This,guid,type,handle,dllname,function,package)
#endif

#endif

HRESULT STDMETHODCALLTYPE IWineMsiRemoteCustomAction_GetActionInfo_Proxy(
    IWineMsiRemoteCustomAction* This,
    LPCGUID guid,
    INT *type,
    MSIHANDLE *handle,
    BSTR *dllname,
    BSTR *function,
    IWineMsiRemotePackage **package);
void __RPC_STUB IWineMsiRemoteCustomAction_GetActionInfo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);

#endif  /* __IWineMsiRemoteCustomAction_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IMsiServer interface
 */
#ifndef __IMsiServer_INTERFACE_DEFINED__
#define __IMsiServer_INTERFACE_DEFINED__

DEFINE_GUID(IID_IMsiServer, 0x000c101c, 0x0000, 0x0000, 0xc0,0x00, 0x00,0x00,0x00,0x00,0x00,0x46);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("000c101c-0000-0000-c000-000000000046")
IMsiServer : public IUnknown
{
};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IMsiServer, 0x000c101c, 0x0000, 0x0000, 0xc0,0x00, 0x00,0x00,0x00,0x00,0x00,0x46)
#endif
#else
typedef struct IMsiServerVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IMsiServer* This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IMsiServer* This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IMsiServer* This);

    END_INTERFACE
} IMsiServerVtbl;
interface IMsiServer {
    CONST_VTBL IMsiServerVtbl* lpVtbl;
};

#ifdef COBJMACROS
/*** IUnknown methods ***/
#define IMsiServer_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IMsiServer_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IMsiServer_Release(This) (This)->lpVtbl->Release(This)
#endif

#endif


#endif  /* __IMsiServer_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IMsiMessage interface
 */
#ifndef __IMsiMessage_INTERFACE_DEFINED__
#define __IMsiMessage_INTERFACE_DEFINED__

DEFINE_GUID(IID_IMsiMessage, 0x000c101d, 0x0000, 0x0000, 0xc0,0x00, 0x00,0x00,0x00,0x00,0x00,0x46);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("000c101d-0000-0000-c000-000000000046")
IMsiMessage : public IUnknown
{
};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IMsiMessage, 0x000c101d, 0x0000, 0x0000, 0xc0,0x00, 0x00,0x00,0x00,0x00,0x00,0x46)
#endif
#else
typedef struct IMsiMessageVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IMsiMessage* This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IMsiMessage* This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IMsiMessage* This);

    END_INTERFACE
} IMsiMessageVtbl;
interface IMsiMessage {
    CONST_VTBL IMsiMessageVtbl* lpVtbl;
};

#ifdef COBJMACROS
/*** IUnknown methods ***/
#define IMsiMessage_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IMsiMessage_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IMsiMessage_Release(This) (This)->lpVtbl->Release(This)
#endif

#endif


#endif  /* __IMsiMessage_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IMsiCustomAction interface
 */
#ifndef __IMsiCustomAction_INTERFACE_DEFINED__
#define __IMsiCustomAction_INTERFACE_DEFINED__

DEFINE_GUID(IID_IMsiCustomAction, 0x000c1025, 0x0000, 0x0000, 0xc0,0x00, 0x00,0x00,0x00,0x00,0x00,0x46);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("000c1025-0000-0000-c000-000000000046")
IMsiCustomAction : public IUnknown
{
};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IMsiCustomAction, 0x000c1025, 0x0000, 0x0000, 0xc0,0x00, 0x00,0x00,0x00,0x00,0x00,0x46)
#endif
#else
typedef struct IMsiCustomActionVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IMsiCustomAction* This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IMsiCustomAction* This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IMsiCustomAction* This);

    END_INTERFACE
} IMsiCustomActionVtbl;
interface IMsiCustomAction {
    CONST_VTBL IMsiCustomActionVtbl* lpVtbl;
};

#ifdef COBJMACROS
/*** IUnknown methods ***/
#define IMsiCustomAction_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IMsiCustomAction_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IMsiCustomAction_Release(This) (This)->lpVtbl->Release(This)
#endif

#endif


#endif  /* __IMsiCustomAction_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IMsiRemoteAPI interface
 */
#ifndef __IMsiRemoteAPI_INTERFACE_DEFINED__
#define __IMsiRemoteAPI_INTERFACE_DEFINED__

DEFINE_GUID(IID_IMsiRemoteAPI, 0x000c1033, 0x0000, 0x0000, 0xc0,0x00, 0x00,0x00,0x00,0x00,0x00,0x46);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("000c1033-0000-0000-c000-000000000046")
IMsiRemoteAPI : public IUnknown
{
};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IMsiRemoteAPI, 0x000c1033, 0x0000, 0x0000, 0xc0,0x00, 0x00,0x00,0x00,0x00,0x00,0x46)
#endif
#else
typedef struct IMsiRemoteAPIVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IMsiRemoteAPI* This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IMsiRemoteAPI* This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IMsiRemoteAPI* This);

    END_INTERFACE
} IMsiRemoteAPIVtbl;
interface IMsiRemoteAPI {
    CONST_VTBL IMsiRemoteAPIVtbl* lpVtbl;
};

#ifdef COBJMACROS
/*** IUnknown methods ***/
#define IMsiRemoteAPI_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IMsiRemoteAPI_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IMsiRemoteAPI_Release(This) (This)->lpVtbl->Release(This)
#endif

#endif


#endif  /* __IMsiRemoteAPI_INTERFACE_DEFINED__ */

/*****************************************************************************
 * MsiServer coclass
 */

DEFINE_GUID(CLSID_MsiServer, 0x000c101c, 0x0000, 0x0000, 0xc0,0x00, 0x00,0x00,0x00,0x00,0x00,0x46);

#ifdef __cplusplus
class DECLSPEC_UUID("000c101c-0000-0000-c000-000000000046") MsiServer;
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(MsiServer, 0x000c101c, 0x0000, 0x0000, 0xc0,0x00, 0x00,0x00,0x00,0x00,0x00,0x46)
#endif
#endif

/*****************************************************************************
 * MsiServerMessage coclass
 */

DEFINE_GUID(CLSID_MsiServerMessage, 0x000c101d, 0x0000, 0x0000, 0xc0,0x00, 0x00,0x00,0x00,0x00,0x00,0x46);

#ifdef __cplusplus
class DECLSPEC_UUID("000c101d-0000-0000-c000-000000000046") MsiServerMessage;
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(MsiServerMessage, 0x000c101d, 0x0000, 0x0000, 0xc0,0x00, 0x00,0x00,0x00,0x00,0x00,0x46)
#endif
#endif

/*****************************************************************************
 * PSFactoryBuffer coclass
 */

DEFINE_GUID(CLSID_PSFactoryBuffer, 0x000c103e, 0x0000, 0x0000, 0xc0,0x00, 0x00,0x00,0x00,0x00,0x00,0x46);

#ifdef __cplusplus
class DECLSPEC_UUID("000c103e-0000-0000-c000-000000000046") PSFactoryBuffer;
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(PSFactoryBuffer, 0x000c103e, 0x0000, 0x0000, 0xc0,0x00, 0x00,0x00,0x00,0x00,0x00,0x46)
#endif
#endif

/*****************************************************************************
 * MsiTransform coclass
 */

DEFINE_GUID(CLSID_MsiTransform, 0x000c1082, 0x0000, 0x0000, 0xc0,0x00, 0x00,0x00,0x00,0x00,0x00,0x46);

#ifdef __cplusplus
class DECLSPEC_UUID("000c1082-0000-0000-c000-000000000046") MsiTransform;
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(MsiTransform, 0x000c1082, 0x0000, 0x0000, 0xc0,0x00, 0x00,0x00,0x00,0x00,0x00,0x46)
#endif
#endif

/*****************************************************************************
 * MsiDatabase coclass
 */

DEFINE_GUID(CLSID_MsiDatabase, 0x000c1084, 0x0000, 0x0000, 0xc0,0x00, 0x00,0x00,0x00,0x00,0x00,0x46);

#ifdef __cplusplus
class DECLSPEC_UUID("000c1084-0000-0000-c000-000000000046") MsiDatabase;
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(MsiDatabase, 0x000c1084, 0x0000, 0x0000, 0xc0,0x00, 0x00,0x00,0x00,0x00,0x00,0x46)
#endif
#endif

/*****************************************************************************
 * MsiPatch coclass
 */

DEFINE_GUID(CLSID_MsiPatch, 0x000c1086, 0x0000, 0x0000, 0xc0,0x00, 0x00,0x00,0x00,0x00,0x00,0x46);

#ifdef __cplusplus
class DECLSPEC_UUID("000c1086-0000-0000-c000-000000000046") MsiPatch;
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(MsiPatch, 0x000c1086, 0x0000, 0x0000, 0xc0,0x00, 0x00,0x00,0x00,0x00,0x00,0x46)
#endif
#endif

/*****************************************************************************
 * MsiServerX3 coclass
 */

DEFINE_GUID(CLSID_MsiServerX3, 0x000c1094, 0x0000, 0x0000, 0xc0,0x00, 0x00,0x00,0x00,0x00,0x00,0x46);

#ifdef __cplusplus
class DECLSPEC_UUID("000c1094-0000-0000-c000-000000000046") MsiServerX3;
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(MsiServerX3, 0x000c1094, 0x0000, 0x0000, 0xc0,0x00, 0x00,0x00,0x00,0x00,0x00,0x46)
#endif
#endif

/*****************************************************************************
 * WineMsiRemoteCustomAction coclass
 */

DEFINE_GUID(CLSID_WineMsiRemoteCustomAction, 0xba26e6fa, 0x4f27, 0x4f56, 0x95,0x3a, 0x3f,0x90,0x27,0x20,0x18,0xaa);

#ifdef __cplusplus
class DECLSPEC_UUID("ba26e6fa-4f27-4f56-953a-3f90272018aa") WineMsiRemoteCustomAction;
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(WineMsiRemoteCustomAction, 0xba26e6fa, 0x4f27, 0x4f56, 0x95,0x3a, 0x3f,0x90,0x27,0x20,0x18,0xaa)
#endif
#endif

/*****************************************************************************
 * WineMsiRemotePackage coclass
 */

DEFINE_GUID(CLSID_WineMsiRemotePackage, 0x902b3592, 0x9d08, 0x4dfd, 0xa5,0x93, 0xd0,0x7c,0x52,0x54,0x64,0x21);

#ifdef __cplusplus
class DECLSPEC_UUID("902b3592-9d08-4dfd-a593-d07c52546421") WineMsiRemotePackage;
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(WineMsiRemotePackage, 0x902b3592, 0x9d08, 0x4dfd, 0xa5,0x93, 0xd0,0x7c,0x52,0x54,0x64,0x21)
#endif
#endif


DEFINE_GUID(LIBID_WindowsInstaller, 0x000c1092, 0x0000, 0x0000, 0xc0,0x00, 0x00,0x00,0x00,0x00,0x00,0x46);

#ifndef __Installer_FWD_DEFINED__
#define __Installer_FWD_DEFINED__
typedef interface Installer Installer;
#endif

#ifndef __Record_FWD_DEFINED__
#define __Record_FWD_DEFINED__
typedef interface Record Record;
#endif

#ifndef __Session_FWD_DEFINED__
#define __Session_FWD_DEFINED__
typedef interface Session Session;
#endif

#ifndef __Database_FWD_DEFINED__
#define __Database_FWD_DEFINED__
typedef interface Database Database;
#endif

#ifndef __SummaryInfo_FWD_DEFINED__
#define __SummaryInfo_FWD_DEFINED__
typedef interface SummaryInfo SummaryInfo;
#endif

#ifndef __View_FWD_DEFINED__
#define __View_FWD_DEFINED__
typedef interface View View;
#endif

#ifndef __UIPreview_FWD_DEFINED__
#define __UIPreview_FWD_DEFINED__
typedef interface UIPreview UIPreview;
#endif

#ifndef __FeatureInfo_FWD_DEFINED__
#define __FeatureInfo_FWD_DEFINED__
typedef interface FeatureInfo FeatureInfo;
#endif

#ifndef __RecordList_FWD_DEFINED__
#define __RecordList_FWD_DEFINED__
typedef interface RecordList RecordList;
#endif

#ifndef __StringList_FWD_DEFINED__
#define __StringList_FWD_DEFINED__
typedef interface StringList StringList;
#endif

#ifndef __Product_FWD_DEFINED__
#define __Product_FWD_DEFINED__
typedef interface Product Product;
#endif

#ifndef __Patch_FWD_DEFINED__
#define __Patch_FWD_DEFINED__
typedef interface Patch Patch;
#endif

typedef enum __WIDL_msiserver_generated_name_00000000 {
    msiInstallStateNotUsed = -7,
    msiInstallStateBadConfig = -6,
    msiInstallStateIncomplete = -5,
    msiInstallStateSourceAbsent = -4,
    msiInstallStateInvalidArg = -2,
    msiInstallStateUnknown = -1,
    msiInstallStateBroken = 0,
    msiInstallStateAdvertised = 1,
    msiInstallStateRemoved = 1,
    msiInstallStateAbsent = 2,
    msiInstallStateLocal = 3,
    msiInstallStateSource = 4,
    msiInstallStateDefault = 5
} MsiInstallState;
typedef enum __WIDL_msiserver_generated_name_00000001 {
    msiOpenDatabaseModeReadOnly = 0,
    msiOpenDatabaseModeTransact = 1,
    msiOpenDatabaseModeDirect = 2,
    msiOpenDatabaseModeCreate = 3,
    msiOpenDatabaseModeCreateDirect = 4,
    msiOpenDatabaseModePatchFile = 32
} MsiOpenDatabaseMode;
typedef enum __WIDL_msiserver_generated_name_00000002 {
    msiUILevelNoChange = 0,
    msiUILevelDefault = 1,
    msiUILevelNone = 2,
    msiUILevelBasic = 3,
    msiUILevelReduced = 4,
    msiUILevelFull = 5,
    msiUILevelHideCancel = 32,
    msiUILevelProgressOnly = 64,
    msiUILevelEndDialog = 128,
    msiUILevelSourceResOnly = 256
} MsiUILevel;
/*****************************************************************************
 * Installer dispinterface
 */
#ifndef __Installer_DISPINTERFACE_DEFINED__
#define __Installer_DISPINTERFACE_DEFINED__

DEFINE_GUID(DIID_Installer, 0x000c1090, 0x0000, 0x0000, 0xc0,0x00, 0x00,0x00,0x00,0x00,0x00,0x46);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("000c1090-0000-0000-c000-000000000046")
Installer : public IDispatch
{
};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(Installer, 0x000c1090, 0x0000, 0x0000, 0xc0,0x00, 0x00,0x00,0x00,0x00,0x00,0x46)
#endif
#else
typedef struct InstallerVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        Installer* This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        Installer* This);

    ULONG (STDMETHODCALLTYPE *Release)(
        Installer* This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        Installer* This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        Installer* This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        Installer* This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        Installer* This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    END_INTERFACE
} InstallerVtbl;
interface Installer {
    CONST_VTBL InstallerVtbl* lpVtbl;
};

#ifdef COBJMACROS
/*** IUnknown methods ***/
#define Installer_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define Installer_AddRef(This) (This)->lpVtbl->AddRef(This)
#define Installer_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define Installer_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define Installer_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define Installer_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define Installer_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#endif

#endif

#endif  /* __Installer_DISPINTERFACE_DEFINED__ */

/*****************************************************************************
 * Record dispinterface
 */
#ifndef __Record_DISPINTERFACE_DEFINED__
#define __Record_DISPINTERFACE_DEFINED__

DEFINE_GUID(DIID_Record, 0x000c1093, 0x0000, 0x0000, 0xc0,0x00, 0x00,0x00,0x00,0x00,0x00,0x46);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("000c1093-0000-0000-c000-000000000046")
Record : public IDispatch
{
};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(Record, 0x000c1093, 0x0000, 0x0000, 0xc0,0x00, 0x00,0x00,0x00,0x00,0x00,0x46)
#endif
#else
typedef struct RecordVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        Record* This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        Record* This);

    ULONG (STDMETHODCALLTYPE *Release)(
        Record* This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        Record* This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        Record* This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        Record* This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        Record* This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    END_INTERFACE
} RecordVtbl;
interface Record {
    CONST_VTBL RecordVtbl* lpVtbl;
};

#ifdef COBJMACROS
/*** IUnknown methods ***/
#define Record_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define Record_AddRef(This) (This)->lpVtbl->AddRef(This)
#define Record_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define Record_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define Record_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define Record_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define Record_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#endif

#endif

#endif  /* __Record_DISPINTERFACE_DEFINED__ */

/*****************************************************************************
 * StringList dispinterface
 */
#ifndef __StringList_DISPINTERFACE_DEFINED__
#define __StringList_DISPINTERFACE_DEFINED__

DEFINE_GUID(DIID_StringList, 0x000c1095, 0x0000, 0x0000, 0xc0,0x00, 0x00,0x00,0x00,0x00,0x00,0x46);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("000c1095-0000-0000-c000-000000000046")
StringList : public IDispatch
{
};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(StringList, 0x000c1095, 0x0000, 0x0000, 0xc0,0x00, 0x00,0x00,0x00,0x00,0x00,0x46)
#endif
#else
typedef struct StringListVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        StringList* This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        StringList* This);

    ULONG (STDMETHODCALLTYPE *Release)(
        StringList* This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        StringList* This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        StringList* This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        StringList* This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        StringList* This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    END_INTERFACE
} StringListVtbl;
interface StringList {
    CONST_VTBL StringListVtbl* lpVtbl;
};

#ifdef COBJMACROS
/*** IUnknown methods ***/
#define StringList_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define StringList_AddRef(This) (This)->lpVtbl->AddRef(This)
#define StringList_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define StringList_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define StringList_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define StringList_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define StringList_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#endif

#endif

#endif  /* __StringList_DISPINTERFACE_DEFINED__ */

/*****************************************************************************
 * RecordList dispinterface
 */
#ifndef __RecordList_DISPINTERFACE_DEFINED__
#define __RecordList_DISPINTERFACE_DEFINED__

DEFINE_GUID(DIID_RecordList, 0x000c1096, 0x0000, 0x0000, 0xc0,0x00, 0x00,0x00,0x00,0x00,0x00,0x46);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("000c1096-0000-0000-c000-000000000046")
RecordList : public IDispatch
{
};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(RecordList, 0x000c1096, 0x0000, 0x0000, 0xc0,0x00, 0x00,0x00,0x00,0x00,0x00,0x46)
#endif
#else
typedef struct RecordListVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        RecordList* This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        RecordList* This);

    ULONG (STDMETHODCALLTYPE *Release)(
        RecordList* This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        RecordList* This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        RecordList* This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        RecordList* This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        RecordList* This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    END_INTERFACE
} RecordListVtbl;
interface RecordList {
    CONST_VTBL RecordListVtbl* lpVtbl;
};

#ifdef COBJMACROS
/*** IUnknown methods ***/
#define RecordList_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define RecordList_AddRef(This) (This)->lpVtbl->AddRef(This)
#define RecordList_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define RecordList_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define RecordList_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define RecordList_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define RecordList_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#endif

#endif

#endif  /* __RecordList_DISPINTERFACE_DEFINED__ */

/*****************************************************************************
 * UIPreview dispinterface
 */
#ifndef __UIPreview_DISPINTERFACE_DEFINED__
#define __UIPreview_DISPINTERFACE_DEFINED__

DEFINE_GUID(DIID_UIPreview, 0x000c109a, 0x0000, 0x0000, 0xc0,0x00, 0x00,0x00,0x00,0x00,0x00,0x46);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("000c109a-0000-0000-c000-000000000046")
UIPreview : public IDispatch
{
};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(UIPreview, 0x000c109a, 0x0000, 0x0000, 0xc0,0x00, 0x00,0x00,0x00,0x00,0x00,0x46)
#endif
#else
typedef struct UIPreviewVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        UIPreview* This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        UIPreview* This);

    ULONG (STDMETHODCALLTYPE *Release)(
        UIPreview* This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        UIPreview* This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        UIPreview* This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        UIPreview* This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        UIPreview* This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    END_INTERFACE
} UIPreviewVtbl;
interface UIPreview {
    CONST_VTBL UIPreviewVtbl* lpVtbl;
};

#ifdef COBJMACROS
/*** IUnknown methods ***/
#define UIPreview_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define UIPreview_AddRef(This) (This)->lpVtbl->AddRef(This)
#define UIPreview_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define UIPreview_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define UIPreview_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define UIPreview_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define UIPreview_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#endif

#endif

#endif  /* __UIPreview_DISPINTERFACE_DEFINED__ */

/*****************************************************************************
 * SummaryInfo dispinterface
 */
#ifndef __SummaryInfo_DISPINTERFACE_DEFINED__
#define __SummaryInfo_DISPINTERFACE_DEFINED__

DEFINE_GUID(DIID_SummaryInfo, 0x000c109b, 0x0000, 0x0000, 0xc0,0x00, 0x00,0x00,0x00,0x00,0x00,0x46);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("000c109b-0000-0000-c000-000000000046")
SummaryInfo : public IDispatch
{
};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(SummaryInfo, 0x000c109b, 0x0000, 0x0000, 0xc0,0x00, 0x00,0x00,0x00,0x00,0x00,0x46)
#endif
#else
typedef struct SummaryInfoVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        SummaryInfo* This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        SummaryInfo* This);

    ULONG (STDMETHODCALLTYPE *Release)(
        SummaryInfo* This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        SummaryInfo* This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        SummaryInfo* This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        SummaryInfo* This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        SummaryInfo* This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    END_INTERFACE
} SummaryInfoVtbl;
interface SummaryInfo {
    CONST_VTBL SummaryInfoVtbl* lpVtbl;
};

#ifdef COBJMACROS
/*** IUnknown methods ***/
#define SummaryInfo_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define SummaryInfo_AddRef(This) (This)->lpVtbl->AddRef(This)
#define SummaryInfo_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define SummaryInfo_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define SummaryInfo_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define SummaryInfo_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define SummaryInfo_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#endif

#endif

#endif  /* __SummaryInfo_DISPINTERFACE_DEFINED__ */

typedef enum __WIDL_msiserver_generated_name_00000003 {
    msiViewModifySeek = -1,
    msiViewModifyRefresh = 0,
    msiViewModifyInsert = 1,
    msiViewModifyUpdate = 2,
    msiViewModifyAssign = 3,
    msiViewModifyReplace = 4,
    msiViewModifyMerge = 5,
    msiViewModifyDelete = 6,
    msiViewModifyInsertTemporary = 7,
    msiViewModifyValidate = 8,
    msiViewModifyValidateNew = 9,
    msiViewModifyValidateField = 10,
    msiViewModifyValidateDelete = 11
} _MsiViewModify;
/*****************************************************************************
 * View dispinterface
 */
#ifndef __View_DISPINTERFACE_DEFINED__
#define __View_DISPINTERFACE_DEFINED__

DEFINE_GUID(DIID_View, 0x000c109c, 0x0000, 0x0000, 0xc0,0x00, 0x00,0x00,0x00,0x00,0x00,0x46);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("000c109c-0000-0000-c000-000000000046")
View : public IDispatch
{
};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(View, 0x000c109c, 0x0000, 0x0000, 0xc0,0x00, 0x00,0x00,0x00,0x00,0x00,0x46)
#endif
#else
typedef struct ViewVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        View* This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        View* This);

    ULONG (STDMETHODCALLTYPE *Release)(
        View* This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        View* This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        View* This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        View* This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        View* This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    END_INTERFACE
} ViewVtbl;
interface View {
    CONST_VTBL ViewVtbl* lpVtbl;
};

#ifdef COBJMACROS
/*** IUnknown methods ***/
#define View_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define View_AddRef(This) (This)->lpVtbl->AddRef(This)
#define View_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define View_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define View_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define View_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define View_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#endif

#endif

#endif  /* __View_DISPINTERFACE_DEFINED__ */

/*****************************************************************************
 * Database dispinterface
 */
#ifndef __Database_DISPINTERFACE_DEFINED__
#define __Database_DISPINTERFACE_DEFINED__

DEFINE_GUID(DIID_Database, 0x000c109d, 0x0000, 0x0000, 0xc0,0x00, 0x00,0x00,0x00,0x00,0x00,0x46);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("000c109d-0000-0000-c000-000000000046")
Database : public IDispatch
{
};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(Database, 0x000c109d, 0x0000, 0x0000, 0xc0,0x00, 0x00,0x00,0x00,0x00,0x00,0x46)
#endif
#else
typedef struct DatabaseVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        Database* This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        Database* This);

    ULONG (STDMETHODCALLTYPE *Release)(
        Database* This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        Database* This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        Database* This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        Database* This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        Database* This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    END_INTERFACE
} DatabaseVtbl;
interface Database {
    CONST_VTBL DatabaseVtbl* lpVtbl;
};

#ifdef COBJMACROS
/*** IUnknown methods ***/
#define Database_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define Database_AddRef(This) (This)->lpVtbl->AddRef(This)
#define Database_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define Database_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define Database_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define Database_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define Database_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#endif

#endif

#endif  /* __Database_DISPINTERFACE_DEFINED__ */

typedef enum __WIDL_msiserver_generated_name_00000004 {
    msiDoActionStatusNoAction = 0,
    msiDoActionStatusSuccess = 1,
    msiDoActionStatusUserExit = 2,
    msiDoActionStatusFailure = 3,
    msiDoActionStatusSuspend = 4,
    msiDoActionStatusFinished = 5,
    msiDoActionStatusWrongState = 6,
    msiDoActionStatusBadActionData = 7
} MsiDoActionStatus;
typedef enum __WIDL_msiserver_generated_name_00000005 {
    msiRunModeAdmin = 0,
    msiRunModeAdvertise = 1,
    msiRunModeMaintenance = 2,
    msiRunModeRollbackEnabled = 3,
    msiRunModeLogEnabled = 4,
    msiRunModeOperations = 5,
    msiRunModeRebootAtEnd = 6,
    msiRunModeRebootNow = 7,
    msiRunModeCabinet = 8,
    msiRunModeSourceShortNames = 9,
    msiRunModeTargetShortNames = 10,
    msiRunModeWindows9x = 12,
    msiRunModeZawEnabled = 13,
    msiRunModeScheduled = 16,
    msiRunModeRollback = 17,
    msiRunModeCommit = 18
} MsiRunMode;
typedef enum __WIDL_msiserver_generated_name_00000006 {
    msiEvaluateConditionFalse = 0,
    msiEvaluateConditionTrue = 1,
    msiEvaluateConditionNone = 2,
    msiEvaluateConditionError = 3
} _MsiEvaluateCondition;
typedef enum __WIDL_msiserver_generated_name_00000007 {
    msiMessageStatusError = -1,
    msiMessageStatusNone = 0,
    msiMessageStatusOk = 1,
    msiMessageStatusCancel = 2,
    msiMessageStatusAbort = 3,
    msiMessageStatusRetry = 4,
    msiMessageStatusIgnore = 5,
    msiMessageStatusYes = 6,
    msiMessageStatusNo = 7
} MsiMessageStatus;
typedef enum __WIDL_msiserver_generated_name_00000008 {
    msiMessageTypeFatalExit = 0,
    msiMessageTypeError = 0x1000000,
    msiMessageTypeWarning = 0x2000000,
    msiMessageTypeUser = 0x3000000,
    msiMessageTypeInfo = 0x4000000,
    msiMessageTypeFilesInUse = 0x5000000,
    msiMessageTypeResolveSource = 0x6000000,
    msiMessageTypeOutOfDiskSpace = 0x7000000,
    msiMessageTypeActionStart = 0x8000000,
    msiMessageTypeActionData = 0x9000000,
    msiMessageTypeProgress = 0xa000000,
    msiMessageTypeCommonData = 0xb000000,
    msiMessageTypeOk = 0,
    msiMessageTypeOkCancel = 1,
    msiMessageTypeAbortRetryIgnore = 2,
    msiMessageTypeYesNoCancel = 3,
    msiMessageTypeYesNo = 4,
    msiMessageTypeRetryCancel = 5,
    msiMessageTypeDefault1 = 0,
    msiMessageTypeDefault2 = 256,
    msiMessageTypeDefault3 = 512
} MsiMessageType;
/*****************************************************************************
 * Session dispinterface
 */
#ifndef __Session_DISPINTERFACE_DEFINED__
#define __Session_DISPINTERFACE_DEFINED__

DEFINE_GUID(DIID_Session, 0x000c109e, 0x0000, 0x0000, 0xc0,0x00, 0x00,0x00,0x00,0x00,0x00,0x46);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("000c109e-0000-0000-c000-000000000046")
Session : public IDispatch
{
};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(Session, 0x000c109e, 0x0000, 0x0000, 0xc0,0x00, 0x00,0x00,0x00,0x00,0x00,0x46)
#endif
#else
typedef struct SessionVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        Session* This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        Session* This);

    ULONG (STDMETHODCALLTYPE *Release)(
        Session* This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        Session* This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        Session* This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        Session* This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        Session* This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    END_INTERFACE
} SessionVtbl;
interface Session {
    CONST_VTBL SessionVtbl* lpVtbl;
};

#ifdef COBJMACROS
/*** IUnknown methods ***/
#define Session_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define Session_AddRef(This) (This)->lpVtbl->AddRef(This)
#define Session_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define Session_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define Session_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define Session_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define Session_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#endif

#endif

#endif  /* __Session_DISPINTERFACE_DEFINED__ */

/*****************************************************************************
 * FeatureInfo dispinterface
 */
#ifndef __FeatureInfo_DISPINTERFACE_DEFINED__
#define __FeatureInfo_DISPINTERFACE_DEFINED__

DEFINE_GUID(DIID_FeatureInfo, 0x000c109f, 0x0000, 0x0000, 0xc0,0x00, 0x00,0x00,0x00,0x00,0x00,0x46);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("000c109f-0000-0000-c000-000000000046")
FeatureInfo : public IDispatch
{
};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(FeatureInfo, 0x000c109f, 0x0000, 0x0000, 0xc0,0x00, 0x00,0x00,0x00,0x00,0x00,0x46)
#endif
#else
typedef struct FeatureInfoVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        FeatureInfo* This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        FeatureInfo* This);

    ULONG (STDMETHODCALLTYPE *Release)(
        FeatureInfo* This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        FeatureInfo* This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        FeatureInfo* This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        FeatureInfo* This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        FeatureInfo* This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    END_INTERFACE
} FeatureInfoVtbl;
interface FeatureInfo {
    CONST_VTBL FeatureInfoVtbl* lpVtbl;
};

#ifdef COBJMACROS
/*** IUnknown methods ***/
#define FeatureInfo_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define FeatureInfo_AddRef(This) (This)->lpVtbl->AddRef(This)
#define FeatureInfo_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define FeatureInfo_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define FeatureInfo_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define FeatureInfo_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define FeatureInfo_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#endif

#endif

#endif  /* __FeatureInfo_DISPINTERFACE_DEFINED__ */

/*****************************************************************************
 * Product dispinterface
 */
#ifndef __Product_DISPINTERFACE_DEFINED__
#define __Product_DISPINTERFACE_DEFINED__

DEFINE_GUID(DIID_Product, 0x000c10a0, 0x0000, 0x0000, 0xc0,0x00, 0x00,0x00,0x00,0x00,0x00,0x46);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("000c10a0-0000-0000-c000-000000000046")
Product : public IDispatch
{
};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(Product, 0x000c10a0, 0x0000, 0x0000, 0xc0,0x00, 0x00,0x00,0x00,0x00,0x00,0x46)
#endif
#else
typedef struct ProductVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        Product* This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        Product* This);

    ULONG (STDMETHODCALLTYPE *Release)(
        Product* This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        Product* This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        Product* This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        Product* This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        Product* This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    END_INTERFACE
} ProductVtbl;
interface Product {
    CONST_VTBL ProductVtbl* lpVtbl;
};

#ifdef COBJMACROS
/*** IUnknown methods ***/
#define Product_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define Product_AddRef(This) (This)->lpVtbl->AddRef(This)
#define Product_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define Product_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define Product_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define Product_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define Product_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#endif

#endif

#endif  /* __Product_DISPINTERFACE_DEFINED__ */

/*****************************************************************************
 * Patch dispinterface
 */
#ifndef __Patch_DISPINTERFACE_DEFINED__
#define __Patch_DISPINTERFACE_DEFINED__

DEFINE_GUID(DIID_Patch, 0x000c10a1, 0x0000, 0x0000, 0xc0,0x00, 0x00,0x00,0x00,0x00,0x00,0x46);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("000c10a1-0000-0000-c000-000000000046")
Patch : public IDispatch
{
};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(Patch, 0x000c10a1, 0x0000, 0x0000, 0xc0,0x00, 0x00,0x00,0x00,0x00,0x00,0x46)
#endif
#else
typedef struct PatchVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        Patch* This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        Patch* This);

    ULONG (STDMETHODCALLTYPE *Release)(
        Patch* This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        Patch* This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        Patch* This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        Patch* This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        Patch* This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    END_INTERFACE
} PatchVtbl;
interface Patch {
    CONST_VTBL PatchVtbl* lpVtbl;
};

#ifdef COBJMACROS
/*** IUnknown methods ***/
#define Patch_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define Patch_AddRef(This) (This)->lpVtbl->AddRef(This)
#define Patch_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define Patch_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define Patch_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define Patch_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define Patch_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#endif

#endif

#endif  /* __Patch_DISPINTERFACE_DEFINED__ */

/*****************************************************************************
 * MsiInstaller coclass
 */

DEFINE_GUID(CLSID_MsiInstaller, 0x000c1090, 0x0000, 0x0000, 0xc0,0x00, 0x00,0x00,0x00,0x00,0x00,0x46);

#ifdef __cplusplus
class DECLSPEC_UUID("000c1090-0000-0000-c000-000000000046") MsiInstaller;
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(MsiInstaller, 0x000c1090, 0x0000, 0x0000, 0xc0,0x00, 0x00,0x00,0x00,0x00,0x00,0x46)
#endif
#endif

/* Begin additional prototypes for all interfaces */

ULONG           __RPC_USER BSTR_UserSize     (ULONG *, ULONG, BSTR *);
unsigned char * __RPC_USER BSTR_UserMarshal  (ULONG *, unsigned char *, BSTR *);
unsigned char * __RPC_USER BSTR_UserUnmarshal(ULONG *, unsigned char *, BSTR *);
void            __RPC_USER BSTR_UserFree     (ULONG *, BSTR *);

/* End additional prototypes */

#ifdef __cplusplus
}
#endif

#endif /* __WIDL_MSISERVER_H */

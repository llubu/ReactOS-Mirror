--- wine-1.3.21/dlls/wininet/internet.h	2012-06-20 13:23:07 +0200
+++ dll/win32/wininet/internet.h	2012-06-20 13:58:16 +0200
@@ -528,7 +528,11 @@ BOOL NETCON_is_alive(netconn_t*) DECLSPE
 LPCVOID NETCON_GetCert(netconn_t *connection) DECLSPEC_HIDDEN;
 int NETCON_GetCipherStrength(netconn_t*) DECLSPEC_HIDDEN;
 DWORD NETCON_set_timeout(netconn_t *connection, BOOL send, int value) DECLSPEC_HIDDEN;
+#ifndef __REACTOS__
 int sock_get_error(int) DECLSPEC_HIDDEN;
+#else
+#define sock_get_error(x) WSAGetLastError()
+#endif
 
 extern void URLCacheContainers_CreateDefaults(void) DECLSPEC_HIDDEN;
 extern void URLCacheContainers_DeleteAll(void) DECLSPEC_HIDDEN;
--- wine-1.3.21/dlls/wininet/netconnection.c	2012-06-20 13:23:07 +0200
+++ dll/win32/wininet/netconnection.c	2012-06-20 13:40:10 +0200
@@ -587,6 +587,7 @@ void NETCON_unload(void)
 #endif
 }
 
+#ifndef __REACTOS__
 /* translate a unix error code into a winsock one */
 int sock_get_error( int err )
 {
@@ -653,6 +654,7 @@ int sock_get_error( int err )
 #endif
     return err;
 }
+#endif
 
 /******************************************************************************
  * NETCON_secure_connect
--- wine-1.3.21/dlls/wininet/internet.c	2012-06-20 13:23:07 +0200
+++ dll/win32/wininet/internet.c	2012-06-20 13:39:47 +0200
@@ -292,7 +292,9 @@ BOOL WINAPI DllMain (HINSTANCE hinstDLL,
 	    if (g_dwTlsErrIndex == TLS_OUT_OF_INDEXES)
 		return FALSE;
 
+#ifndef __REACTOS__
             URLCacheContainers_CreateDefaults();
+#endif
 
             WININET_hModule = hinstDLL;
 
@@ -3597,19 +3599,23 @@ LPSTR INTERNET_GetResponseBuffer(void)
 
 LPSTR INTERNET_GetNextLine(INT nSocket, LPDWORD dwLen)
 {
-    struct pollfd pfd;
+    // ReactOS: use select instead of poll
+    fd_set infd;
+    struct timeval tv;
     BOOL bSuccess = FALSE;
     INT nRecv = 0;
     LPSTR lpszBuffer = INTERNET_GetResponseBuffer();
 
     TRACE("\n");
 
-    pfd.fd = nSocket;
-    pfd.events = POLLIN;
+    FD_ZERO(&infd);
+    FD_SET(nSocket,&infd);
+    tv.tv_sec = RESPONSE_TIMEOUT;
+    tv.tv_usec = 0;
 
     while (nRecv < MAX_REPLY_LEN)
     {
-        if (poll(&pfd,1, RESPONSE_TIMEOUT * 1000) > 0)
+        if (select(0, &infd, NULL, NULL, &tv) > 0)
         {
             if (recv(nSocket, &lpszBuffer[nRecv], 1, 0) <= 0)
             {
Index: dll/win32/wininet/urlcache.c
===================================================================
--- wine-1.3.21/dlls/wininet/urlcache.c	2012-06-20 13:23:07 +0200
+++ dll/win32/wininet/urlcache.c	2012-06-20 13:41:43 +0200
@@ -182,6 +182,8 @@ typedef struct _URLCACHECONTAINER
 
 /* List of all containers available */
 static struct list UrlContainers = LIST_INIT(UrlContainers);
+// ReactOS r54992
+BOOL bDefaultContainersAdded = FALSE;
 
 static DWORD URLCache_CreateHashTable(LPURLCACHE_HEADER pHeader, HASH_CACHEFILE_ENTRY *pPrevHash, HASH_CACHEFILE_ENTRY **ppHash);
 
@@ -518,6 +520,8 @@ void URLCacheContainers_CreateDefaults(v
     static const WCHAR HistoryPrefix[] = {'V','i','s','i','t','e','d',':',0};
     static const WCHAR CookieSuffix[] = {0};
     static const WCHAR CookiePrefix[] = {'C','o','o','k','i','e',':',0};
+    // ReactOS r50916
+    static const WCHAR UserProfile[] = {'U','S','E','R','P','R','O','F','I','L','E',0};
     static const struct
     {
         int nFolder; /* CSIDL_* constant */
@@ -531,6 +535,13 @@ void URLCacheContainers_CreateDefaults(v
     };
     DWORD i;
 
+    // ReactOS r50916
+    if (GetEnvironmentVariableW(UserProfile, NULL, 0) == 0 && GetLastError() == ERROR_ENVVAR_NOT_FOUND)
+    {
+        TRACE("Environment variable 'USERPROFILE' does not exist!\n");
+        return;
+    }
+
     for (i = 0; i < sizeof(DefaultContainerData) / sizeof(DefaultContainerData[0]); i++)
     {
         WCHAR wszCachePath[MAX_PATH];
@@ -584,6 +595,10 @@ static DWORD URLCacheContainers_FindCont
     if(!lpwszUrl)
         return ERROR_INVALID_PARAMETER;
 
+    // ReactOS r54992
+    if (!bDefaultContainersAdded)
+        URLCacheContainers_CreateDefaults();
+
     LIST_FOR_EACH_ENTRY(pContainer, &UrlContainers, URLCACHECONTAINER, entry)
     {
         int prefix_len = strlenW(pContainer->cache_prefix);
@@ -622,6 +637,10 @@ static BOOL URLCacheContainers_Enum(LPCW
     if (lpwszSearchPattern && dwIndex > 0)
         return FALSE;
 
+    // ReactOS r54992
+    if (!bDefaultContainersAdded)
+        URLCacheContainers_CreateDefaults();
+
     LIST_FOR_EACH_ENTRY(pContainer, &UrlContainers, URLCACHECONTAINER, entry)
     {
         if (lpwszSearchPattern)
@@ -1525,6 +1544,10 @@ BOOL WINAPI FreeUrlCacheSpaceW(LPCWSTR l
         return FALSE;
     }
 
+    // ReactOS r54992
+    if (!bDefaultContainersAdded)
+        URLCacheContainers_CreateDefaults();
+
     LIST_FOR_EACH_ENTRY(pContainer, &UrlContainers, URLCACHECONTAINER, entry)
     {
         /* The URL cache has prefix L"" (unlike Cookies and History) */
Index: dll/win32/wininet/http.c
===================================================================
--- wine-1.3.21/dlls/wininet/http.c	2012-06-20 13:37:39 +0200
+++ dll/win32/wininet/http.c	2012-06-20 13:52:44 +0200
@@ -71,6 +71,9 @@
 #include "wine/exception.h"
 #include "wine/unicode.h"
 
+// ReactOS
+#include "inet_ntop.c"
+
 WINE_DEFAULT_DEBUG_CHANNEL(wininet);
 
 static const WCHAR g_szHttp1_0[] = {'H','T','T','P','/','1','.','0',0};
@@ -243,8 +246,17 @@ void server_release(server_t *server)
     if(InterlockedDecrement(&server->ref))
         return;
 
+#ifndef __REACTOS__
     if(!server->ref)
-        server->keep_until = GetTickCount64() + COLLECT_TIME;
+        server->keep_until = (DWORD64)GetTickCount() + COLLECT_TIME;
+#else
+    EnterCriticalSection(&connection_pool_cs);
+    list_remove(&server->entry);
+    LeaveCriticalSection(&connection_pool_cs);
+    
+    heap_free(server->name);
+    heap_free(server);
+#endif
 }
 
 static server_t *get_server(const WCHAR *name, INTERNET_PORT port)
@@ -290,7 +302,7 @@ BOOL collect_connections(BOOL collect_al
     BOOL remaining = FALSE;
     DWORD64 now;
 
-    now = GetTickCount64();
+    now = GetTickCount();
 
     LIST_FOR_EACH_ENTRY_SAFE(server, server_safe, &connection_pool, server_t, entry) {
         LIST_FOR_EACH_ENTRY_SAFE(netconn, netconn_safe, &server->conn_pool, netconn_t, pool_entry) {
@@ -1859,13 +1871,14 @@ static void http_release_netconn(http_re
     if(!req->netconn)
         return;
 
+#ifndef __REACTOS__
     if(reuse && req->netconn->keep_alive) {
         BOOL run_collector;
 
         EnterCriticalSection(&connection_pool_cs);
 
         list_add_head(&req->netconn->server->conn_pool, &req->netconn->pool_entry);
-        req->netconn->keep_until = GetTickCount64() + COLLECT_TIME;
+        req->netconn->keep_until = (DWORD64)GetTickCount() + COLLECT_TIME;
         req->netconn = NULL;
 
         run_collector = !collector_running;
@@ -1893,6 +1906,7 @@ static void http_release_netconn(http_re
         }
         return;
     }
+#endif
 
     INTERNET_SendCallback(&req->hdr, req->hdr.dwContext,
                           INTERNET_STATUS_CLOSING_CONNECTION, 0, 0);
using System;
using System.IO;
using System.Collections;
using System.Collections.Generic;
using System.Text;

using SysGen.BuildEngine;
using SysGen.BuildEngine.Backends;
using SysGen.BuildEngine.Framework;
using SysGen.RBuild.Framework;

namespace SysGen.BuildEngine.Backends
{
    public class MingwBackend : CompilerBaseBacked
    {
        public const string ECHO_AR_MACRO = "$(ECHO_AR)";
        public const string ECHO_CC_MACRO = "$(ECHO_CC)";
        public const string ECHO_LD_MACRO = "$(ECHO_LD)";
        public const string ECHO_WRC_MACRO = "$(ECHO_WRC)";

        public const string EMPTY_DEF_FILE = "tools\\rbuild\\empty.def";

        protected bool m_UsePipe = false;
        protected bool m_UsePch = false;
        protected bool m_ManualBinUtilsSetting = false;

        protected List<MingwRBuildModuleHandler> m_ModuleHandlers = new List<MingwRBuildModuleHandler>();

        public MingwBackend(SysGenEngine sysgen)
            : base(sysgen)
        {
        }

        protected override string FriendlyName
        {
            get { return "MINGW32 Backend"; }
        }

        private void WriteXmlRBuildFiles(MakefileWriter makefile, RBuildProject project)
        {
            foreach (string xmlBuildFile in SysGen.BuildFiles)
            {
                makefile.WriteIndentedLine(xmlBuildFile);
            }
        }

        protected List<MingwRBuildModuleHandler> ModuleHandlers
        {
            get { return m_ModuleHandlers; }
        }

        protected override void Generate()
        {
            base.Generate();

            using (MakefileWriter makefile = new MakefileWriter(Directory.GetCurrentDirectory() + "\\" + Project.MakeFile))
            {
                makefile.WriteComplexComment("THIS FILE IS AUTOMATICALLY GENERATED, EDIT " + Project.XmlFile + " INSTEAD");
                makefile.WriteLine();

                makefile.WriteProperty("nasm", "nasm");
                makefile.WriteProperty("ARCH", "i386");

                foreach (RBuildProperty property in SysGen.Project.Properties)
                {
                    if (property.Internal == false)
                    {
                        if (property.Value != null)
                        {
                            makefile.WriteProperty(
                                property.Name.ToString(),
                                property.Value.ToString());
                        }
                    }
                }

                makefile.WriteComplexComment("XML rbuild files");

                makefile.WritePropertyListStart("XMLBUILDFILES");
                WriteXmlRBuildFiles(makefile, Project);
                makefile.WritePropertyListEnd();

                MingwRBuildElementHandler projectHandler = new MingwRBuildProjectHandler(Project);

                projectHandler.Makefile = makefile;
                projectHandler.SysGen = SysGen;
                projectHandler.GenerateMakeFile();         

                //BackendBuildModule cModule;
                SourceFile cFile;
                MingwRBuildModuleHandler moduleHandler = null;

                foreach (RBuildModule module in SysGen.Project.Platform.Modules)
                {                   
                    makefile.WritePropertyListStart(module.MakeFileSources);
                    foreach (RBuildSourceFile file in module.SourceFiles)
                    {
                        makefile.WriteIndentedLine(file.FullPath);
                    }
                    makefile.WritePropertyListEnd();
                }

                foreach (RBuildModule module in SysGen.Project.Platform.Modules)
                {
                    if (module.Type == ModuleType.RpcClient)
                    {
                        makefile.WritePropertyListStart(module.MakeFileRPCHeaders);

                        foreach (RBuildSourceFile file in module.SourceFiles)
                        {
                            cFile = new SourceFile(file, module, SysGen);

                            if (cFile.File.IsWidl)
                            {
                                makefile.WriteIndentedLine(cFile.SourceRpcClientHeaderFile.IntermediateFullPath);
                            }
                        }

                        makefile.WritePropertyListEnd();
                        makefile.WritePropertyListStart(module.MakeFileRPCSources);

                        foreach (RBuildSourceFile file in module.SourceFiles)
                        {
                            cFile = new SourceFile(file, module, SysGen);

                            if (cFile.File.IsWidl)
                            {
                                makefile.WriteIndentedLine(cFile.SourceCodeActualFile.IntermediateFullPath);
                            }
                        }

                        makefile.WritePropertyListEnd();
                    }

                    if (module.Type == ModuleType.RpcClient || 
                        module.Type == ModuleType.RpcServer ||
                        module.Type == ModuleType.RpcProxy)
                    {
                        makefile.WritePropertyListStart(module.MakeFileObjs);

                        // Procesamos primero los .idl que generan .h que pueden
                        // ser luego requeridos para compilar el resto del módulo.

                        foreach (RBuildSourceFile file in module.SourceFiles)
                        {
                            cFile = new SourceFile(file, module, SysGen);

                            if (cFile.File.IsWidl)
                            {
                                makefile.WriteIndentedLine(cFile.SourceCodeObjectFile.IntermediateFullPath);
                            }
                        }

                        // Luego compilamos el resto de fuentes
                        foreach (RBuildSourceFile file in module.SourceFiles)
                        {
                            cFile = new SourceFile(file, module, SysGen);

                            if (!cFile.File.IsWidl && !cFile.File.IsMessageTable)
                            {
                                makefile.WriteIndentedLine(cFile.SourceCodeObjectFile.IntermediateFullPath);
                            }
                        }

                        makefile.WritePropertyListEnd();
                    }
                    else
                    {
                        makefile.WritePropertyListStart(module.MakeFileHeaders);

                        // Procesamos primero los .idl que generan .h que pueden
                        // ser luego requeridos para compilar el resto del módulo.

                        foreach (RBuildSourceFile file in module.SourceFiles)
                        {
                            cFile = new SourceFile(file, module, SysGen);

                            if (module.Type == ModuleType.EmbeddedTypeLib)
                            {
                                /* idl files in EmbeddedTypeLib modules do not generate header files */
                            }
                            else
                            {
                                if (cFile.File.IsWidl)
                                {
                                    makefile.WriteIndentedLine(cFile.SourceCodeObjectFile.IntermediateFullPath);
                                }
                            }
                        }

                        makefile.WritePropertyListEnd();
                        makefile.WritePropertyListStart(module.MakeFilePCHHeaders);

                        // Procesamos primero los .idl que generan .h que pueden
                        // ser luego requeridos para compilar el resto del módulo.

                        foreach (RBuildSourceFile file in module.SourceFiles)
                        {
                            cFile = new SourceFile(file, module, SysGen);

                            if (cFile.File.IsHeader)
                            {
                                makefile.WriteIndentedLine(cFile.SourceCodeObjectFile.IntermediateFullPath);
                            }
                        }

                        makefile.WritePropertyListEnd();
                        makefile.WritePropertyListStart(module.MakeFileMCHeaders);

                        // Procesamos primero los .idl que generan .h que pueden
                        // ser luego requeridos para compilar el resto del módulo.

                        foreach (RBuildSourceFile file in module.SourceFiles)
                        {
                            cFile = new SourceFile(file, module, SysGen);

                            if (cFile.File.IsMessageTable)
                            {
                                makefile.WriteIndentedLine(cFile.MessageTableHeaderFile.IntermediateFullPath);
                            }
                        }

                        makefile.WritePropertyListEnd();
                        makefile.WritePropertyListStart(module.MakeFileObjs);

                        foreach (RBuildSourceFile file in module.SourceFiles)
                        {
                            cFile = new SourceFile(file, module, SysGen);
                            //if (cFile.File.IsCompilable)
                            if (!cFile.File.IsWidl && !cFile.File.IsMessageTable &&!cFile.File.IsHeader)
                            {
                                makefile.WriteIndentedLine(cFile.SourceCodeObjectFile.IntermediateFullPath);
                            }
                        }

                        makefile.WritePropertyListEnd();
                    }
                }

                makefile.WriteLine();


                foreach (RBuildModule module in SysGen.Project.Platform.Modules)
                {
                    moduleHandler = null;

                    switch (module.Type)
                    {
                        case ModuleType.RpcClient:
                            moduleHandler = new MingwRpcClientHeaderModuleHandler(module);
                            break;
                        case ModuleType.RpcServer:
                            moduleHandler = new MingwRpcServerHeaderModuleHandler(module);
                            break;
                        case ModuleType.RpcProxy:
                            moduleHandler = new MingwRpcProxyModuleHandler(module);
                            break;
                        case ModuleType.BootLoader:
                            moduleHandler = new MingwBootLoaderModuleHandler(module);
                            break;
                        case ModuleType.BootSector:
                            moduleHandler = new MingwBootSectorModuleHandler(module);
                            break;
                        case ModuleType.IdlHeader:
                            moduleHandler = new MingwIdlHeaderModuleHandler(module);
                            break;
                        case ModuleType.Win32CUI:
                            moduleHandler = new MingwWin32CUIModuleHandler(module);
                            break;
                        case ModuleType.Win32SCR:
                        case ModuleType.Win32GUI:
                            moduleHandler = new MingwWin32GUIModuleHandler(module);
                            break;
                        case ModuleType.Win32DLL:
                            moduleHandler = new MingwWin32DLLModuleHandler(module);
                            break;
                        case ModuleType.Win32OCX:
                            moduleHandler = new MingwWin32OCXModuleHandler(module);
                            break;
                        case ModuleType.KeyboardLayout:
                        case ModuleType.KernelModeDLL:
                            moduleHandler = new MingwKernelModeDLLModuleHandler(module);
                            break;
                        case ModuleType.KernelModeDriver:
                            moduleHandler = new MingwKernelModeDriverModuleHandler(module);
                            break;
                        case ModuleType.Kernel:
                            moduleHandler = new MingwKernelModuleHandler(module);
                            break;
                        case ModuleType.NativeCUI:
                            moduleHandler = new MingwNativeCUIModuleHandler(module);
                            break;
                        case ModuleType.NativeDLL:
                            moduleHandler = new MingwNativeDLLModuleHandler(module);
                            break;
                        case ModuleType.ObjectLibrary:
                            moduleHandler = new MingwObjectLibraryModuleHandler(module);
                            break;
                        case ModuleType.StaticLibrary:
                            moduleHandler = new MingwStaticLibraryModuleHandler(module);
                            break;
                        case ModuleType.EmbeddedTypeLib:
                            moduleHandler = new MingwEmbeddedTypeLibModuleHandler(module);
                            break;
                        case ModuleType.HostStaticLibrary:
                            moduleHandler = new MingwHostStaticLibraryModuleHandler(module);
                            break;
                        case ModuleType.BuildTool:
                            moduleHandler = new MingwBuildToolModuleHandler(module);
                            break;
                        case ModuleType.Cabinet:
                            moduleHandler = new MingwCabinetModuleHandler(module);
                            break;
                        case ModuleType.Iso:
                            moduleHandler = new MingwBootCDTargetHandler(module);
                            break;
                        case ModuleType.LiveIso:
                            moduleHandler = new MingwLiveCDTargetHandler(module);
                            break;
                        case ModuleType.IsoRegTest:
                            moduleHandler = new MingwBootCDRegTestTargetHandler(module);
                            break;
                        case ModuleType.LiveIsoRegTest:
                            moduleHandler = new MingwLiveCDRegTestTargetHandler(module);
                            break;
                        case ModuleType.MessageHeader:
                            moduleHandler = new MingwMessageHeaderModuleHandler(module);
                            break;
                        case ModuleType.Package:
                            moduleHandler = new MingwPackageModuleHandler(module);
                            break;
                    }

                    if (moduleHandler != null)
                    {
                        moduleHandler.SysGen = SysGen;
                        moduleHandler.Makefile = makefile;
                        moduleHandler.Project = Project;

                        ModuleHandlers.Add(moduleHandler);
                    }

                }

                foreach (MingwRBuildModuleHandler moduleHandler2 in ModuleHandlers)
                {
                    if (moduleHandler2.Module.IsBuildable) // Hack
                    {
                        makefile.WriteProperty(moduleHandler2.Module.MakeFileTarget, moduleHandler2.ModuleTarget);
                    }
                }

                foreach (MingwRBuildModuleHandler moduleHandler2 in ModuleHandlers)
                {
                    if (moduleHandler2.Module.IsBuildable) // Hack
                    {
                        makefile.WriteComplexComment("Buid instructions for module '{0}' on '{1}' [{2}]",
                            moduleHandler2.Module.Name,
                            moduleHandler2.Module.Base,
                            moduleHandler2.Module.Type);

                        moduleHandler2.GenerateMakeFile();

                        makefile.WritePhonyTarget(moduleHandler2.Module.MakeFileMakeTarget);
                        makefile.WriteRule(moduleHandler2.Module.Name, moduleHandler2.Module.MakeFileTargetMacro);
                        makefile.WriteLine();

                        makefile.WriteSingleLineTarget(moduleHandler2.Module.MakeFileInfoTarget);
                        makefile.WriteLine("\t@echo =======================Module Info============================");
                        makefile.WriteLine("\t@echo  Name:   '{0}'", moduleHandler2.Module.Name);
                        makefile.WriteLine("\t@echo  Type:   '{0}'", moduleHandler2.Module.Type);
                        makefile.WriteLine("\t@echo  Base:   '{0}'", moduleHandler2.Module.Base);
                        makefile.WriteLine("\t@echo  XML:    '{0}'", moduleHandler2.Module.RBuildPath);
                        makefile.WriteLine("\t@echo  Target: '{0}'", moduleHandler2.Module.TargetName);
                        makefile.WriteLine("\t@echo ===============================================================");
                        makefile.WriteLine();

                        makefile.WriteSingleLineTarget(moduleHandler2.Module.MakeFileFlagDebugTarget);
                        makefile.WriteLine("\t@echo =======================Module Debug Info=======================");
                        makefile.WriteLine("\t@echo  CFLAGS:   '{0}'", moduleHandler2.Module.MakeFileCFlagsMacro);
                        makefile.WriteLine("\t@echo  LFLAGS:   '{0}'", moduleHandler2.Module.MakeFileLFlagsMacro);
                        makefile.WriteLine("\t@echo  LIBS:     '{0}'", moduleHandler2.Module.MakeFileLibsMacro);
                        makefile.WriteLine("\t@echo  LINKDEPS: '{0}'", moduleHandler2.Module.MakeFileLinkDepsMacro);
                        makefile.WriteLine("\t@echo  NASM:     '{0}'", moduleHandler2.Module.MakeFileNASMMacro);
                        makefile.WriteLine("\t@echo  OBJS:     '{0}'", moduleHandler2.Module.MakeFileObjsMacro);
                        makefile.WriteLine("\t@echo  RCFLAGS:  '{0}'", moduleHandler2.Module.MakeFileRCFlagsMacro);
                        makefile.WriteLine("\t@echo  TARGET:   '{0}'", moduleHandler2.Module.MakeFileTargetMacro);
                        makefile.WriteLine("\t@echo  WIDL:     '{0}'", moduleHandler2.Module.MakeFileWIDLFlagsMacro);
                        makefile.WriteLine("\t@echo ===============================================================");
                        makefile.WriteLine();
                    }
                }

                GenerateAllTarget(makefile);
                GenerateCleanTarget(makefile);
                GenerateInstallTarget(makefile);
                GenerateTestTarget(makefile);
            }
        }

        private void GenerateAllTarget(MakefileWriter makefile)
        {
            makefile.WriteComplexComment("Generate the ALL target");
            makefile.WriteTarget("all");

            foreach (RBuildModule module in SysGen.Project.Platform.Modules)
            {
                if ((module.Enabled) && (module.IncludeInAllTarget))
                {
                    makefile.WriteIndentedLine(module.MakeFileTargetMacro);
                }
            }
        }

        private void GenerateCleanTarget(MakefileWriter makefile)
        {
            makefile.WriteComplexComment("Generate the CLEAN target");
            makefile.WriteTarget("clean");

            foreach (RBuildModule module in SysGen.Project.Platform.Modules)
            {
                makefile.WriteIndentedLine(module.MakeFileCleanTarget);
            }
        }

        private void GenerateInstallTarget(MakefileWriter makefile)
        {
            makefile.WriteComplexComment("Generate the INSTALL target");
            makefile.WriteTarget("install");

            //foreach (RBuildModule module in SysGen.Project.Platform.Modules)
            //{
            //    makefile.WriteIndentedLine(module.MakeFileCleanTarget);
            //}
        }

        private void GenerateTestTarget(MakefileWriter makefile)
        {
            RBuildFolderCollection folders = new RBuildFolderCollection();

            makefile.WriteComplexComment("Generate the TEST target");
            makefile.WriteSingleLineTarget("test");

            foreach (RBuildFolder folder in Project.Folders)
            {
                if (folders.Contains(folder) == false)
                    folders.Add(folder);
            }

            foreach (RBuildModule module in Project.Modules)
            {
                foreach (RBuildFolder folder in module.Folders)
                {
                    if (folders.Contains(folder) == false)
                        folders.Add(folder);
                }
            }

            foreach (RBuildInstallFolder folder in Project.InstallFolders)
            {
                if (folders.Contains(folder) == false)
                    folders.Add(folder);
            }

            foreach (RBuildFolder folder in folders)
            {
                GenerateFolder(makefile, folder);
            }
        }

        private void GenerateFolder(MakefileWriter makefile, RBuildFolder folder)
        {
            if ((folder.Root == PathRoot.Default) ||
                (folder.Root == PathRoot.SourceCode))
            {
                makefile.WriteLine("{0}: | {1}",
                    SysGen.ResolveRBuildFilePath(new RBuildFolder(PathRoot.Intermediate, folder.FullPath)),
                    SysGen.ResolveRBuildFilePath(new RBuildFolder(PathRoot.Intermediate, folder.Parent.FullPath)));

                makefile.WriteSingleLineIndented("$(ECHO_MKDIR)");
                makefile.WriteSingleLineIndented("$(mkdir) $@");

                makefile.WriteLine("{0}: | {1}",
                    SysGen.ResolveRBuildFilePath(new RBuildFolder(PathRoot.Output, folder.FullPath)),
                    SysGen.ResolveRBuildFilePath(new RBuildFolder(PathRoot.Output, folder.Parent.FullPath)));

                makefile.WriteSingleLineIndented("$(ECHO_MKDIR)");
                makefile.WriteSingleLineIndented("$(mkdir) $@");
            }

            //Create the install and output folders
            if (folder.Root == PathRoot.Output ||
                folder.Root == PathRoot.Install)
            {
                makefile.WriteLine("{0}: | {1}",
                    SysGen.ResolveRBuildFilePath(new RBuildFolder(folder.Root, folder.FullPath)),
                    SysGen.ResolveRBuildFilePath(new RBuildFolder(folder.Root, folder.Parent.FullPath)));

                makefile.WriteSingleLineIndented("$(ECHO_MKDIR)");
                makefile.WriteSingleLineIndented("$(mkdir) $@");
            }
        }
    }
}

using System;
using System.IO;
using System.Collections.Generic;
using System.Text;

using SysGen.RBuild.Framework;

namespace SysGen.BuildEngine.Framework
{
    public class DffFileWriter : AutoGeneratedFileWriter
    {
        public DffFileWriter(RBuildProject project , string file)
            : base(project , file)
        {
        }

        public override void WriteFile()
        {
            WriteHeader();
            WriteModuleTargets();
        }

        protected void WriteHeader()
        {
            WriteLine("; Main ReactOS package");
            WriteLine();
            WriteLine(".Set DiskLabelTemplate=\"ReactOS\"                ; Label of disk");
            WriteLine(".Set CabinetNameTemplate=\"reactos.cab\"          ; reactos.cab");
            WriteLine(".Set InfFileName=\"reactos.inf\"                  ; reactos.inf");
            WriteLine();
            WriteLine(";.Set Cabinet=on");
            WriteLine(";.Set Compress=on");
            WriteLine();
            WriteLine(".InfBegin");
            WriteLine("[Version]");
            WriteLine("Signature = \"$ReactOS$\"");
            WriteLine();
            WriteLine("[Directories]");

            foreach (RBuildInstallFolder folder in Project.InstallFolders)
            {
                if (folder.Name == string.Empty ||
                    folder.Name == ".")
                {
                    WriteLine("{0} =",
                        folder.ID);
                }
                else
                    WriteLine("{0} = {1}",
                        folder.ID,
                        folder.Name);
            }

            WriteLine(".InfEnd");
            WriteLine();
            WriteLine("; Contents of disk");
            WriteLine(".InfBegin");
            WriteLine("[SourceFiles]");
            WriteLine(".InfEnd");
        }

        protected void WriteModuleTargets()
        {
            RBuildInstallFolder installFolder = null;

            WriteLine();
            WriteLine(";Module targets");
            WriteLine();

            foreach (RBuildModule module in Project.Platform.Modules)
            {
                if (module.Enabled)
                {
                    if ((module.IsInstallable) && (module.HasInstallBase))
                    {
                        if ((!module.IsBootstrap || module.IsSpecialIncludedBootStrap) && !module.IsSpecialExcludedBootStrap)
                        {
                            //Get the install folder
                            installFolder = Project.InstallFolders.GetByName(module.InstallBase);

                            if (installFolder == null)
                                throw new BuildException("InstallBase '{0}' for module '{1}' references a non existant install folder",
                                    module.InstallBase,
                                    module.Name);

                            WriteLine("{0,-90}\t{1,10}",
                                module.TargetFile.FullPath,
                                installFolder.ID);
                        }
                    }

                    foreach (RBuildOutputFile file in module.Files)
                    {
                        RBuildPlatformFile platformFile = file as RBuildPlatformFile;

                        if (platformFile != null)
                        {
                            //Get the install folder
                            installFolder = Project.InstallFolders.GetByName(file.InstallBase);

                            if (installFolder == null)
                                throw new BuildException("InstallBase '{0}' for file '{1}' references a non existant install folder",
                                    platformFile.InstallBase,
                                    platformFile.FullPath);

                            WriteLine("{0,-90}\t{1,10}",
                                platformFile.FullPath,
                                installFolder.ID);
                        }
                    }
                }
            }

            WriteLine();
            WriteLine(";Install files");
            WriteLine();

            foreach (RBuildOutputFile file in Project.Files)
            {
                RBuildPlatformFile platformFile = file as RBuildPlatformFile;

                if (platformFile != null)
                {
                    //Get the install folder
                    installFolder = Project.InstallFolders.GetByName(file.InstallBase);

                    if (installFolder == null)
                        throw new BuildException("InstallBase '{0}' for file '{1}' references a non existant install folder",
                            platformFile.InstallBase,
                            platformFile.FullPath);

                    WriteLine("{0,-90}\t{1,10}",
                        platformFile.FullPath,
                        installFolder.ID);
                }
            }
        }
    }
}

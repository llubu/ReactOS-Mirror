using System;
using System.IO;
using System.Collections.Generic;
using System.Text;

using SysGen.RBuild.Framework;

namespace SysGen.BuildEngine.Framework
{
    public class TxtSetupFileWriter : AutoGeneratedInfFileWriter
    {
        public TxtSetupFileWriter(RBuildProject project, string file)
            : base(project , file)
        {
        }

        public override void WriteFile()
        {
            WriteHeader();
            WriteDirectories();
            WriteSourceDiskDiles();
            WriteLanguages();
            WriteKeyboardLayouts();
            WriteKeyboardLayoutFiles();
            WriteRegistryInstall();
        }

        protected override void WriteHeader()
        {
            WriteSection("Version");
            WriteLine("Signature = \"$ReactOS$\"");
            WriteLine();
        }

        public void WriteDirectories()
        {
            WriteLine("[Directories]");
            WriteLine("; <directory_id> = <path>");

            foreach (RBuildInstallFolder folder in Project.InstallFolders)
            {
                WriteLine("{0} = {1}",
                    folder.ID,
                    folder.Name);
            }
        }

        public void WriteSourceDiskDiles()
        {
            RBuildInstallFolder installFolder = null;

            WriteLine("[SourceDisksFiles]");

            foreach (RBuildModule module in Project.Modules)
            {
                if (module.Bootstrap != null)
                {
                    if (module.Type == ModuleType.KernelModeDriver ||
                        module.Type == ModuleType.KernelModeDLL)
                    {
                        //Get the install folder
                        installFolder = Project.InstallFolders.GetByName(module.InstallBase);
                        
                        if (installFolder == null)
                            throw new BuildException("InstallBase '{0}' for module '{1}' references a non existant install folder",
                                module.InstallBase,
                                module.Name);

                        WriteLine("{0,-50}\t{1,50}",
                            module.TargetFile.FullPath,
                            installFolder.ID);
                    }
                }
            }

            WriteLine();
        }

        protected void WriteLanguages()
        {
            WriteSection("Languages");
            
            foreach (RBuildLanguage language in Project.Platform.Languages)
            {
                WriteLine("{0} = \"{1}\"",
                    language.LCID,
                    language.Name);
            }
            
            WriteLine();
        }

        protected void WriteKeyboardLayouts()
        {
            WriteSection("KeyboardLayout");

            foreach (RBuildModule module in Project.Platform.Modules)
            {
                if (module.Type == ModuleType.KeyboardLayout)
                {
                    WriteLine("{0} = \"{1}\"",
                        module.LCID , 
                        module.Description);
                }
            }

            WriteLine();
        }

        protected void WriteKeyboardLayoutFiles()
        {
            WriteSection("Files.KeyboardLayout");

            foreach (RBuildModule module in Project.Platform.Modules)
            {
                if (module.Type == ModuleType.KeyboardLayout)
                {
                    WriteLine("{0} = {1}",
                        module.LCID,
                        module.TargetName);
                }
            }

            WriteLine();
        }

        protected void WriteRegistryInstall()
        {
            WriteLine("[HiveInfs.Install]");
            WriteLine("AddReg=hivecls.inf,AddReg");
            WriteLine("AddReg=hivedef.inf,AddReg");
            WriteLine("AddReg=hivesft.inf,AddReg");
            WriteLine("AddReg=hivesys.inf,AddReg");
            WriteLine();
        }
    }
}

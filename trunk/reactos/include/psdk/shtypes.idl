/*
 * Type definitions for shell objects
 *
 * Copyright (C) 1999 Juergen Schmied
 * Copyright (C) 2003 Alexandre Julliard
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
 */

import "wtypes.idl";



cpp_quote("#include <pshpack1.h>")
typedef struct
{
    WORD cb;      /* nr of bytes in this item */
    BYTE abID[1]; /* first byte in this item */
} SHITEMID, *LPSHITEMID;
typedef const SHITEMID *LPCSHITEMID;

typedef struct _ITEMIDLIST
{
    SHITEMID mkid; /* first itemid in list */
} ITEMIDLIST;

cpp_quote("#if defined(STRICT_TYPED_ITEMIDS) && defined(__cplusplus)")
cpp_quote("typedef struct _ITEMIDLIST_RELATIVE : ITEMIDLIST {} ITEMIDLIST_RELATIVE;")
cpp_quote("typedef struct _ITEMID_CHILD : ITEMIDLIST_RELATIVE {} ITEMID_CHILD;")
cpp_quote("typedef struct _ITEMIDLIST_ABSOLUTE : ITEMIDLIST_RELATIVE {} ITEMIDLIST_ABSOLUTE;")
cpp_quote("#else /* !(defined(STRICT_TYPED_ITEMIDS) && defined(__cplusplus)) */")
typedef ITEMIDLIST ITEMIDLIST_RELATIVE;
typedef ITEMIDLIST ITEMID_CHILD;
typedef ITEMIDLIST ITEMIDLIST_ABSOLUTE;
cpp_quote("#endif /* defined(STRICT_TYPED_ITEMIDS) && defined(__cplusplus) */")

cpp_quote("#include <poppack.h>")

typedef [unique] BYTE_BLOB * wirePIDL;
typedef ITEMIDLIST /*__unaligned*/ * LPITEMIDLIST;
typedef const ITEMIDLIST /*__unaligned*/ * LPCITEMIDLIST;

cpp_quote("#if defined(STRICT_TYPED_ITEMIDS) && defined(__cplusplus)")
typedef ITEMIDLIST_ABSOLUTE * PIDLIST_ABSOLUTE;
typedef const ITEMIDLIST_ABSOLUTE * PCIDLIST_ABSOLUTE;
typedef const ITEMIDLIST_ABSOLUTE /*__unaligned*/ * PCUIDLIST_ABSOLUTE;
typedef ITEMIDLIST_RELATIVE * PIDLIST_RELATIVE;
typedef const ITEMIDLIST_RELATIVE * PCIDLIST_RELATIVE;
typedef ITEMIDLIST_RELATIVE /*__unaligned*/ * PUIDLIST_RELATIVE;
typedef const ITEMIDLIST_RELATIVE /*__unaligned*/ * PCUIDLIST_RELATIVE;
typedef ITEMID_CHILD * PITEMID_CHILD;
typedef const ITEMID_CHILD * PCITEMID_CHILD;
typedef ITEMID_CHILD /*__unaligned*/ * PUITEMID_CHILD;
typedef const ITEMID_CHILD /*__unaligned*/ * PCUITEMID_CHILD;

typedef PCUITEMID_CHILD const *PCUITEMID_CHILD_ARRAY;
typedef PCUIDLIST_RELATIVE const *PCUIDLIST_RELATIVE_ARRAY;
typedef PCIDLIST_ABSOLUTE const *PCIDLIST_ABSOLUTE_ARRAY;
typedef PCUIDLIST_ABSOLUTE const *PCUIDLIST_ABSOLUTE_ARRAY;
cpp_quote("#else /* !(defined(STRICT_TYPED_ITEMIDS) && defined(__cplusplus)) */")
cpp_quote("#define PIDLIST_ABSOLUTE         LPITEMIDLIST")
cpp_quote("#define PCIDLIST_ABSOLUTE        LPCITEMIDLIST")
cpp_quote("#define PCUIDLIST_ABSOLUTE       LPCITEMIDLIST")
cpp_quote("#define PIDLIST_RELATIVE         LPITEMIDLIST")
cpp_quote("#define PCIDLIST_RELATIVE        LPCITEMIDLIST")
cpp_quote("#define PUIDLIST_RELATIVE        LPITEMIDLIST")
cpp_quote("#define PCUIDLIST_RELATIVE       LPCITEMIDLIST")
cpp_quote("#define PITEMID_CHILD            LPITEMIDLIST")
cpp_quote("#define PCITEMID_CHILD           LPCITEMIDLIST")
cpp_quote("#define PUITEMID_CHILD           LPITEMIDLIST")
cpp_quote("#define PCUITEMID_CHILD          LPCITEMIDLIST")
cpp_quote("#define PCUITEMID_CHILD_ARRAY    LPCITEMIDLIST *")
cpp_quote("#define PCUIDLIST_RELATIVE_ARRAY LPCITEMIDLIST *")
cpp_quote("#define PCIDLIST_ABSOLUTE_ARRAY  LPCITEMIDLIST *")
cpp_quote("#define PCUIDLIST_ABSOLUTE_ARRAY LPCITEMIDLIST *")
cpp_quote("#endif /* defined(STRICT_TYPED_ITEMIDS) && defined(__cplusplus) */")


#ifndef MAX_PATH
#define MAX_PATH 260
#endif

cpp_quote("#if 0")
typedef struct { int dummy; } WIN32_FIND_DATAA, WIN32_FIND_DATAW;
cpp_quote("#endif")

typedef enum tagSTRRET_TYPE
{
    STRRET_WSTR = 0,
    STRRET_OFFSET = 1,
    STRRET_CSTR = 2
} STRRET_TYPE;

cpp_quote("#include <pshpack4.h>")
typedef struct _STRRET
{
    UINT uType;			/* STRRET_xxx */
    [switch_type(UINT), switch_is(uType)] union
    {
    [case(STRRET_WSTR)][string] LPWSTR    pOleStr;        /* OLESTR that will be freed */
    [case(STRRET_OFFSET)]       UINT      uOffset;        /* Offset into SHITEMID (ANSI) */
    [case(STRRET_CSTR)]         char      cStr[MAX_PATH]; /* ANSI Buffer */
    } DUMMYUNIONNAME;
} STRRET, *LPSTRRET;
cpp_quote("#include <poppack.h>")

cpp_quote("#include <pshpack1.h>")
typedef struct
{
    int fmt;
    int cxChar;
    STRRET str;
} SHELLDETAILS, *LPSHELLDETAILS;
cpp_quote("#include <poppack.h>")

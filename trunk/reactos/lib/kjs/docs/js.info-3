This is Info file js.info, produced by Makeinfo version 1.68 from the
input file js.texi.

INFO-DIR-SECTION NGS JavaScript Interpreter
START-INFO-DIR-ENTRY
* libjs: (js).			The JavaScript interpreter library.
* js: (js)The js Program.	JavaScript interpreter.
END-INFO-DIR-ENTRY

   This file documents NGS JavaScript interpreter 0.2.5

   Copyright (C) 1998 New Generation Software (NGS) Oy

   Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

   Permission is granted to copy and distribute modified versions of
this manual under the conditions for verbatim copying, provided that
the entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

   Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions, except that this permission notice may be stated in a
translation approved by the Foundation.


File: js.info,  Node: Constants Section,  Next: Symtab Section,  Prev: Code Section,  Up: Byte-Code File Format

Constants Section
-----------------

   The constants section contains the constant values of the byte-code.
The different constant types are stored as follows:

integer
     (UInt8)`3', (Int32)VALUE

string
     (UInt8)`4', (UInt32)LENGTH, LENGTH BYTES OF DATA

float
     (UInt8)`5', (double)VALUE

symbol
     (UInt8)`10', SYMBOL NAME, (UInt8)`0'

NaN
     (UInt8)`13'

regular expression
     (UInt8)`100', (UInt8)FLAGS, (UInt32)LENGTH, LENGTH BYTES OF REGEXP
     SOURCE

     The item FLAGS holds the regular expression flags.  It is a
     combination of the following flags:

    `0x01'
          global match

    `0x02'
          ignore case


File: js.info,  Node: Symtab Section,  Next: Debug Section,  Prev: Constants Section,  Up: Byte-Code File Format

Symtab Section
--------------


File: js.info,  Node: Debug Section,  Prev: Symtab Section,  Up: Byte-Code File Format

Debug Section
-------------


File: js.info,  Node: Byte-Code Operands,  Next: Stack Frame,  Prev: Byte-Code File Format,  Up: Virtual Machine

Byte-Code Operands
==================

   The virtual machine knows the following byte-code operands.  Each
operand is identified by a 8 bit long unsigned integer number.  The
first operand `halt' has code 0, the next operand `done' has code 1,
and so on.  Some operand take arguments that are shown after the
operand name in the following listing.  The meanings of the arguments
are:

`Int8'
     The code of the operand is followed by a 8 bit long integer number
     argument.

`Int16'
     The code of the operand is followed by a 16 bit long integer number
     argument.

`Int32'
     The code of the operand is followed by a 32 bit long integer number
     argument.

`Symbol'
     The code of the operand is followed by a 32 bit long integer number
     argument.  The number is an offset to the constant section and the
     specified constant is a symbol that is the argument of the operand.

   The notation

   BEFORE => AFTER

desribes how the operand modifies the virtual machine stack.  For
example, the notation:

   -- => `undefined'

means that the operand takes no items from the stack and it pushes
value `undefined' to the stack.  The notation:

   ANY ANY => `boolean'

means that the operand takes two items from the stack and it pushes a
boolean result to the stack.

   The virtual machine knows the following byte-code operands.

 - Operand: halt   -- => --
     Halt the virtual machine.  The program execution stops immediately
     and the virtual machine starts execute the following C-code:

          while (1)
            sleep (5);

     This "sleep forever" loop is implemented for debugging purposes.

 - Operand: done   -- => --
     The execution of the byte-code is finished and the control returns
     to the calling C-function.

 - Operand: nop   -- => --
     Do nothing; no operation.

 - Operand: dup   ANY => ANY ANY
     Duplicate the item at the top of the stack.

 - Operand: pop   ANY => --
     Remove one item from the top of the stack.

 - Operand: pop_n `Int8'   ANY ... ANY => --
     Remove INT8 items from the top of the stack.

 - Operand: apop `Int8'   ANY_N ... ANY_0 => ANY_0
     Remove INT8 items from the top of the stack, leaving the topmost
     item on the top of the stack.  This operand is used to remove
     arguments of a function call, leaving the function's return value
     to the top of the stack.

 - Operand: swap   ANY_1 ANY_2 => ANY_2 ANY_1
     Swap the two topmost items in the stack.

 - Operand: roll `Int8'   ANY_N ... ANY_1 ANY_0 => ANY_0 ANY_N ... ANY_1

 - Operand: const `Int32'   -- => CONST
     Push a constant from the constant section to the stack.  The
     constant is specified by the value INT32.

 - Operand: const_null   -- => `null'
     Push value `null' to the stack.

 - Operand: const_true   -- => `true'
     Push value `true' to the stack.

 - Operand: const_false   -- => `false'
     Push value `false' to the stack.

 - Operand: const_undefined   -- => `undefined'
     Push value `undefined' to the stack.

 - Operand: const_i0   -- => `0'
     Push integer number `0' to the stack.

 - Operand: const_i1   -- => `1'
     Push integer number `1' to the stack.

 - Operand: const_i2   -- => `2'
     Push integer number `2' to the stack.

 - Operand: const_i3   -- => `3'
     Push integer number `3' to the stack.

 - Operand: const_i `Int32'   -- => `Int32'
     Push integer number `Int32' to the stack.

 - Operand: load_global `Symbol'   -- => VALUE
     Push the value of the global variable SYMBOL to the stack.  The
     operand will *not* lookup the variable SYMBOL from the with-chain.

 - Operand: store_global `Symbol'   VALUE => --
     Store the topmost item of the stack to the global variable SYMBOL.

 - Operand: load_arg `Int8'   -- => VALUE
     Push the value of the argument INT8 to the stack.

 - Operand: store_arg `Int8'   VALUE => --
     Store the topmost item of the stack to the argument INT8.

 - Operand: load_local `Int16'   -- => VALUE
     Push the value of the local variable INT16 to the stack.

 - Operand: store_local `Int16'   VALUE => --
     Store the topmost item of the stack to the local variable INT16.

 - Operand: load_property `Symbol'   OBJECT => VALUE
     Push the value of the property SYMBOL of object OBJECT to the
     stack.

 - Operand: store_property `Symbol'   OBJECT VALUE => --
     Save the value VALUE to the property SYMBOL of object OBJECT.

 - Operand: load_array   OBJECT INDEX => VALUE
     Push the INDEX:th item of object OBJECT to the stack.

 - Operand: store_array   VALUE OBJECT INDEX => --
     Store the value VALUE to the INDEX:th position of object OBJECT.

 - Operand: nth   ANY INTEGER => ITEM BOOLEAN
     Push the INTEGER:th item of object ANY to the stack.  Push a
     boolean success status that tells whether the object ANY did
     contain INTEGER:th item.

 - Operand: cmp_eq   ANY1 ANY2 => BOOLEAN
     Compare the two objects ANY1, ANY2 for equality and push a boolean
     result code to the stack.

 - Operand: cmp_ne   ANY ANY => BOOLEAN
     Compare the two objects ANY1, ANY2 for inequality and push a
     boolean result code to the stack.

 - Operand: cmp_lt   ANY1 ANY2 => BOOLEAN
     Compare whether object ANY1 is smaller than object ANY2.  Push a
     boolean result code to the stack.

 - Operand: cmp_gt   ANY1 ANY2 => BOOLEAN
     Compare whether object ANY1 is greater than object ANY2.  Push a
     boolean result code to the stack.

 - Operand: cmp_le   ANY1 ANY2 => BOOLEAN
     Compare whether object ANY1 is smaller than, or equal to object
     ANY2.  Push a boolean result code to the stack.

 - Operand: cmp_ge   ANY1 ANY2 => BOOLEAN
     Compare whether object ANY1 is greater than, or equal to object
     ANY2.  Push a boolean result code to the stack.

 - Operand: cmp_seq   ANY1 ANY2 => BOOLEAN
     Compare the two objects ANY1, ANY2 for strict equality and push a
     boolean result code to the stack.

 - Operand: cmp_sne   ANY ANY => BOOLEAN
     Compare the two objects ANY1, ANY2 for strict inequality and push
     a boolean result code to the stack.

 - Operand: sub   ANY1 ANY2 => RESULT
     Substract object ANY2 from object ANY1 and push the result to the
     stack.

 - Operand: add   ANY1 ANY2 => RESULT
     Add object ANY2 to object ANY1 and push the result to the stack.

 - Operand: mul   ANY1 ANY2 => RESULT
     Multiply object ANY1 with object ANY2 and push the result to the
     stack.

 - Operand: div   ANY1 ANY2 => RESULT
     Divide object ANY1 with object ANY2 and push the result to the
     stack.

 - Operand: mod   INTEGER1 INTEGER2 => RESULT
     Count object INTEGER1 modulo object INTEGER2 and push the result
     to the stack.

 - Operand: neg   ANY => RESULT
     Negate object ANY and push the result to the stack.

 - Operand: and   ANY1 ANY2 => RESULT
     Perform a bitwise and operation between objects ANY1 and ANY2 and
     push the result to the stack.

 - Operand: not   ANY1 ANY2 => RESULT
     Perform a bitwise not operation between objects ANY1 and ANY2 and
     push the result to the stack.

 - Operand: or   ANY1 ANY2 => RESULT
     Perform a bitwise or operation between objects ANY1 and ANY2 and
     push the result to the stack.

 - Operand: xor   ANY1 ANY2 => RESULT
     Perform a bitwise xor operation between objects ANY1 and ANY2 and
     push the result to the stack.

 - Operand: shift_left   INTEGER1 INTEGER2 => INTEGER
     Shift integer number INTEGER1 left INTEGER2 bits.  Push the result
     value to the stack.

 - Operand: shift_right   INTEGER1 INTEGER2 => INTEGER
     Shift integer number INTEGER1 right INTEGER2 bits.  Push the
     result value to the stack.

 - Operand: shift_rright   INTEGER1 INTEGER2 => INTEGER

 - Operand: iffalse `Int32'   ANY => --
     If the topmost item in the stack has boolean value `false', adjust
     the program counter with relative offset INT32.

 - Operand: iftrue `Int32'   ANY => --
     If the topmost item in the stack has boolean value `true', adjust
     the program counter with relative offset INT32.

 - Operand: call_method `Symbol'   OBJECT => RESULT
     Call method SYMBOL in the object OBJECT.  Push the result of the
     method call to the stack.

 - Operand: jmp `Int32'   -- => --
     Adjust program counter with relative offset INT32, e.g. jump to
     relative position PC + INT32.

 - Operand: jsr   FUNCTION => RESULT
     Jump to subroutine FUNCTION and push the result of the subroutine
     call to the stack.  The operand will *not* process the with-chain.

 - Operand: return   RESULT => RESULT
     Return from a subroutine with value RESULT.

 - Operand: typeof   ANY => STRING
     Push the type name of object ANY to the stack.

 - Operand: new   OBJECT => RESULT OBJECT
     Create an instance of object OBJECT and call its constructor
     function.  Push the result from the constructor and the new
     instance to the stack.  The return value of the constructor is
     discarded.

 - Operand: delete_property `Symbol'   OBJECT => UNDEFINED
     Delete property SYMBOL from object OBJECT.  Push value `undefined'
     to the stack.

 - Operand: delete_array   OBJECT INDEX => UNDEFINED
     Delete the INDEX:th property of object OBJECT.  Push value
     `undefined' to the stack.

 - Operand: locals `Int16'   -- => UNDEFINED ... UNDEFINED
     Allocate INT16 local variables from the stack frame.  The operand
     `locals' must be called in the beginning of the function code.  The
     operand will push INT16 `undefined' values to the stack.  The
     values will be the place-holders for the local variables.

 - Operand: min_args `Int8'   INTEGER => --
     If the number of the arguments for the function INTEGER is smaller
     than `Int8', expand the stack frame so that the function gets
     `Int8' arguments.  The created arguments will have value
     `undefined'.

 - Operand: load_nth_arg   INTEGER => ARGUMENT
     Push the INTEGER'th argument of function to the top of the stack.
     The index INTEGER must be an integer number.

 - Operand: with_push   OBJECT => --
     Push object OBJECT to the function's with-lookup chain.

 - Operand: with_pop `Int8'   -- => --
     Pop INT8 objects from the function's with-lookup chain.

 - Operand: try_push `Int32'   -- => --
     Push a try-frame with a catch block offset INT32 to the virtual
     machine's try-chain.

 - Operand: try_pop `Int8'   -- => --
     Pop INT8 frames from the virtual machine's try-chain.

 - Operand: throw   ANY => --
     Throw an exception with value ANY.

 - Operand: iffalse_b `Int32'   BOOLEAN => --
     If the topmost item in the stack is `false', adjust the program
     counter with relative offset INT32.  The operand assumes that the
     topmost item is a boolean value.

 - Operand: iftrue_b `Int32'   BOOLEAN => --
     If the topmost item in the stack is `true', adjust the program
     counter with relative offset INT32.  The operand assumes that the
     topmost item is a boolean value.

 - Operand: add_1_i   INTEGER => INTEGER
     Add integer number one to the top most item in the stack.  The
     operand assumes that the topmost item is an integer number.

 - Operand: add_2_i   INTEGER => INTEGER
     Add integer number two to the top most item in the stack.  The
     operand assumes that the topmost item is an integer number.

 - Operand: load_global_w `Symbol'   -- => VALUE
     Push the value of the global variable SYMBOL to the stack.  The
     operand will lookup the property SYMBOL from the currently active
     with-chain.

 - Operand: jsr_w `Symbol'   FUNCTION => RESULT
     Jump to subroutine FUNCTION and push the result of the subroutine
     call to the stack.  The operand will lookup the method SYMBOL from
     the currently active with-chain.  If the method is not found, the
     argument FUNCTION is used.


File: js.info,  Node: Stack Frame,  Prev: Byte-Code Operands,  Up: Virtual Machine

Stack Frame
===========

     JS_SP0  sp =>
     JS_SP1          local_var_N
     JS_SP2          ...
     JS_SP(N)        local_var_1
     JS_LOCAL(0)     local_var_0
                     return_addr
     JS_WITHPTR      with_ptr
     JS_ARGS_FIXP    args_fix
             fp =>   old_fp
     JS_ARG(0)       this
     JS_ARG(1)       arg_count
     JS_ARG(2)       argument_1
                     argument_2
                     ...
     JS_ARG(N)       argument_N
                     local_var_N
                     ...
                     local_var_0
                     args_fix
                     return_addr
                     with_ptr
                     old_fp
                     this
                     ...


File: js.info,  Node: JavaScript Compiler,  Next: GNU Library General Public License,  Prev: Virtual Machine,  Up: Top

JavaScript Compiler
*******************

   The JavaScript compiler is implemented in the JavaScript language.
Because the JavaScript language does not have namespaces, the compiler
has been coded to a fixed part of the global namespace.  All global
symbols the compiler uses, start with the prefix ``JSC$''.  This prefix
is reserved for the interpreter and users must not define any symbols
or functions starting with that prefix.

   The compiler compiles JavaScript source code to byte-code and it
returns a fixed byte-code file as the result.  This result file (or
data block) can be passed to the virtual machine for execution.

   The compiler has three stages.  The first stage parse the input
stream and create a syntax tree for the input.  The second stage
transforms the syntax tree to a list of assembler operations.  The
third stage converts the symbolic assembler instructions to byte-code
operands.

   Depending on the compilation options, the compiler performs different
optimizations during the compilation.  The basic optimizations include
constant folding, peephole optimization, and optimization of jumps to
jump instructions.  During the batch-compilation (when compiling a
JavaScript source file `.js' to byte-code file `.jsc') the compiler
performns heavier optimizations to minimize the size of the generated
byte-code file, and to speed up some operations.

* Menu:

* Public Entry Points::


File: js.info,  Node: Public Entry Points,  Prev: JavaScript Compiler,  Up: JavaScript Compiler

Public Entry Points
===================

 - Function: JSC$compile_file (NAME, FLAGS, ASM_FILE, BC_FILE)
     Compile JavaScript source file NAME according to FLAGS.  If
     argument ASM_FILE is not `null', symbolic assembler output is
     saved to that file.  If argument BC_FILE is not `null', the
     byte-code output is saved to that file.

     The function returns a string that holds the byte-code output for
     the source file.

 - Function: JSC$compile_string (STRING, FLAGS, ASM_FILE, BC_FILE)
     Compile JavaScript source code STRING according to FLAGS.  If
     argument ASM_FILE is not `null', symbolic assembler output is
     saved to that file.  If argument BC_FILE is not `null', the
     byte-code output is saved to that file.

     The function returns a string that holds the byte-code output for
     the source code.

   In both functions, the argument FLAGS specify the verbosity,
warning, and optimization levels of the compilation.  The following
values can be given to flags:

`JSC$FLAG_VERBOSE'
     turns on diagnostic messages

`JSC$FLAG_ANNOTATE_ASSEMBLER'
     add original JavaScript source lines to the generated assembler
     listing

`JSC$FLAG_GENERATE_DEBUG_INFO'
     generate debugging information to the byte-code file

`JSC$FLAG_GENERATE_EXECUTABLE_BC_FILES'
     add execute permissions to the generated byte-code files

`JSC$FLAG_OPTIMIZE_PEEPHOLE'
     perform peephole optimization

`JSC$FLAG_OPTIMIZE_JUMPS'
     perform optimization for jumps to jump instructions

`JSC$FLAG_OPTIMIZE_BC_SIZE'
     optimize the size of the genated byte-code file

`JSC$FLAG_OPTIMIZE_HEAVY'
     perform optimizations which require liveness analyzing of the
     variables

`JSC$FLAG_OPTIMIZE_MASK'
     mask to turn on all optimizations

`JSC$FLAG_WARN_UNUSED_ARGUMENT'
     warn if an argument of a function is unused in the function body

`JSC$FLAG_WARN_UNUSED_VARIABLE'
     warn in a variable is defined but it is not used in the function
     body

`JSC$FLAG_WARN_SHADOW'
     warn if a variable declaration shadows a parameter of a function

`JSC$FLAG_WARN_WITH_CLOBBER'
     warn if a symbol with-lookup is clobbered because the symbol is
     defined to be a local variable or a function argument

`JSC$FLAG_WARN_MISSING_SEMICOLON'
     warn if a semicolon is missing from the input.  The missing
     semicolons are inserted during the parsing by the automatic
     semicolon inserting.  However, since the missing semicolons show
     bad programming style, this option will warn about them.

`JSC$FLAG_WARN_STRICT_ECMA'
     warn about things that are supported by this implementation, but
     are not allowed by the ECMAScript standard

`JSC$FLAG_WARN_DEPRECATED'
     warn if deprecated features has been used in the source code

`JSC$FLAG_WARN_MASK'
     mask to turn on all warnings

   The compiler entry points can be called from JavaScript and C
programs.  For example, they are used extensively to implement the
JavaScript API, described in the `js.h' file.  The following example
shows how a C-string, containing JavaScript code, can be compiled and
executed.  Similar function can be found from the JavaScript API
implementing the `js_eval()' function.

     int
     eval_code (JSInterpPtr interp, char *code);
     {
       JSNode argv[5];
       int i = 0;
       int result;
       ByteCode *bc;
     
       /* Compile the code. */
     
       /* Argument count. */
       argv[i].type = JS_INTEGER;
       argv[i].u.vinteger = 4;
       i++;
     
       /* Source for the compiler. */
       js_make_static_string (interp->vm, &argv[i], code, strlen (code));
       i++;
     
       /* Flags. */
       argv[i].type = JS_INTEGER;
       argv[i].u.vinteger = JSC_FLAG_VERBOSE;
       argv[i].u.vinteger |= JSC_FLAG_OPTIMIZE_MASK;
       argv[i].u.vinteger |= JSC_FLAG_WARN_MASK;
       i++;
     
       /* Assembler file. */
       argv[i].type = JS_NULL;
       i++;
     
       /* Byte-code file. */
       argv[i].type = JS_NULL;
       i++;
     
       /* Call the compiler entry point. */
       result = js_vm_apply (interp->vm, "JSC$compile_string", i, argv);
       if (result == 0)
         return 0;
     
       bc = js_bc_read_data (interp->vm->exec_result.u.vstring->data,
                             interp->vm->exec_result.u.vstring->len);
     
       /* And finally, execute it. */
       result = js_vm_execute (interp->vm, bc);
     
       /* Free the byte-code. */
       js_bc_free (bc);
     
       return result;
     }

   The following example shows how the compiler entry point can be
called from JavaScript code.  The example code compiles a JavaScript
source code file `input.js' into byte-code and stores the result to file
`ouput.jsc'.

     try
       {
         JSC$compile_file ("input.js",
           		JSC$FLAG_OPTIMIZE_MASK | JSC$FLAG_WARN_MASK,
           		null, "output.jsc");
       }
     catch (e)
       {
         System.stdout.writeln ("compilation failed: " + e);
       }


File: js.info,  Node: GNU Library General Public License,  Next: Index,  Prev: JavaScript Compiler,  Up: Top

GNU Library General Public License
**********************************

GNU LIBRARY GENERAL PUBLIC LICENSE
**********************************

                         Version 2, June 1991

     Copyright (C) 1991 Free Software Foundation, Inc.
     59 Temple Place - Suite 330, Boston, MA 02111-1307, USA
     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.
     
     [This is the first released version of the library GPL.  It is
      numbered 2 because it goes with version 2 of the ordinary GPL.]

Preamble
========

   The licenses for most software are designed to take away your
freedom to share and change it.  By contrast, the GNU General Public
Licenses are intended to guarantee your freedom to share and change
free software--to make sure the software is free for all its users.

   This license, the Library General Public License, applies to some
specially designated Free Software Foundation software, and to any
other libraries whose authors decide to use it.  You can use it for
your libraries, too.

   When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
this service if you wish), that you receive source code or can get it
if you want it, that you can change the software or use pieces of it in
new free programs; and that you know you can do these things.

   To protect your rights, we need to make restrictions that forbid
anyone to deny you these rights or to ask you to surrender the rights.
These restrictions translate to certain responsibilities for you if you
distribute copies of the library, or if you modify it.

   For example, if you distribute copies of the library, whether gratis
or for a fee, you must give the recipients all the rights that we gave
you.  You must make sure that they, too, receive or can get the source
code.  If you link a program with the library, you must provide
complete object files to the recipients so that they can relink them
with the library, after making changes to the library and recompiling
it.  And you must show them these terms so they know their rights.

   Our method of protecting your rights has two steps: (1) copyright
the library, and (2) offer you this license which gives you legal
permission to copy, distribute and/or modify the library.

   Also, for each distributor's protection, we want to make certain
that everyone understands that there is no warranty for this free
library.  If the library is modified by someone else and passed on, we
want its recipients to know that what they have is not the original
version, so that any problems introduced by others will not reflect on
the original authors' reputations.

   Finally, any free program is threatened constantly by software
patents.  We wish to avoid the danger that companies distributing free
software will individually obtain patent licenses, thus in effect
transforming the program into proprietary software.  To prevent this,
we have made it clear that any patent must be licensed for everyone's
free use or not licensed at all.

   Most GNU software, including some libraries, is covered by the
ordinary GNU General Public License, which was designed for utility
programs.  This license, the GNU Library General Public License,
applies to certain designated libraries.  This license is quite
different from the ordinary one; be sure to read it in full, and don't
assume that anything in it is the same as in the ordinary license.

   The reason we have a separate public license for some libraries is
that they blur the distinction we usually make between modifying or
adding to a program and simply using it.  Linking a program with a
library, without changing the library, is in some sense simply using
the library, and is analogous to running a utility program or
application program.  However, in a textual and legal sense, the linked
executable is a combined work, a derivative of the original library,
and the ordinary General Public License treats it as such.

   Because of this blurred distinction, using the ordinary General
Public License for libraries did not effectively promote software
sharing, because most developers did not use the libraries.  We
concluded that weaker conditions might promote sharing better.

   However, unrestricted linking of non-free programs would deprive the
users of those programs of all benefit from the free status of the
libraries themselves.  This Library General Public License is intended
to permit developers of non-free programs to use free libraries, while
preserving your freedom as a user of such programs to change the free
libraries that are incorporated in them.  (We have not seen how to
achieve this as regards changes in header files, but we have achieved
it as regards changes in the actual functions of the Library.)  The
hope is that this will lead to faster development of free libraries.

   The precise terms and conditions for copying, distribution and
modification follow.  Pay close attention to the difference between a
"work based on the library" and a "work that uses the library".  The
former contains code derived from the library, while the latter only
works together with the library.

   Note that it is possible for a library to be covered by the ordinary
General Public License rather than by this special one.

    TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION

  0. This License Agreement applies to any software library which
     contains a notice placed by the copyright holder or other
     authorized party saying it may be distributed under the terms of
     this Library General Public License (also called "this License").
     Each licensee is addressed as "you".

     A "library" means a collection of software functions and/or data
     prepared so as to be conveniently linked with application programs
     (which use some of those functions and data) to form executables.

     The "Library", below, refers to any such software library or work
     which has been distributed under these terms.  A "work based on the
     Library" means either the Library or any derivative work under
     copyright law: that is to say, a work containing the Library or a
     portion of it, either verbatim or with modifications and/or
     translated straightforwardly into another language.  (Hereinafter,
     translation is included without limitation in the term
     "modification".)

     "Source code" for a work means the preferred form of the work for
     making modifications to it.  For a library, complete source code
     means all the source code for all modules it contains, plus any
     associated interface definition files, plus the scripts used to
     control compilation and installation of the library.

     Activities other than copying, distribution and modification are
     not covered by this License; they are outside its scope.  The act
     of running a program using the Library is not restricted, and
     output from such a program is covered only if its contents
     constitute a work based on the Library (independent of the use of
     the Library in a tool for writing it).  Whether that is true
     depends on what the Library does and what the program that uses
     the Library does.

  1. You may copy and distribute verbatim copies of the Library's
     complete source code as you receive it, in any medium, provided
     that you conspicuously and appropriately publish on each copy an
     appropriate copyright notice and disclaimer of warranty; keep
     intact all the notices that refer to this License and to the
     absence of any warranty; and distribute a copy of this License
     along with the Library.

     You may charge a fee for the physical act of transferring a copy,
     and you may at your option offer warranty protection in exchange
     for a fee.

  2. You may modify your copy or copies of the Library or any portion
     of it, thus forming a work based on the Library, and copy and
     distribute such modifications or work under the terms of Section 1
     above, provided that you also meet all of these conditions:

       a. The modified work must itself be a software library.

       b. You must cause the files modified to carry prominent notices
          stating that you changed the files and the date of any change.

       c. You must cause the whole of the work to be licensed at no
          charge to all third parties under the terms of this License.

       d. If a facility in the modified Library refers to a function or
          a table of data to be supplied by an application program that
          uses the facility, other than as an argument passed when the
          facility is invoked, then you must make a good faith effort
          to ensure that, in the event an application does not supply
          such function or table, the facility still operates, and
          performs whatever part of its purpose remains meaningful.

          (For example, a function in a library to compute square roots
          has a purpose that is entirely well-defined independent of the
          application.  Therefore, Subsection 2d requires that any
          application-supplied function or table used by this function
          must be optional: if the application does not supply it, the
          square root function must still compute square roots.)

     These requirements apply to the modified work as a whole.  If
     identifiable sections of that work are not derived from the
     Library, and can be reasonably considered independent and separate
     works in themselves, then this License, and its terms, do not
     apply to those sections when you distribute them as separate
     works.  But when you distribute the same sections as part of a
     whole which is a work based on the Library, the distribution of
     the whole must be on the terms of this License, whose permissions
     for other licensees extend to the entire whole, and thus to each
     and every part regardless of who wrote it.

     Thus, it is not the intent of this section to claim rights or
     contest your rights to work written entirely by you; rather, the
     intent is to exercise the right to control the distribution of
     derivative or collective works based on the Library.

     In addition, mere aggregation of another work not based on the
     Library with the Library (or with a work based on the Library) on
     a volume of a storage or distribution medium does not bring the
     other work under the scope of this License.

  3. You may opt to apply the terms of the ordinary GNU General Public
     License instead of this License to a given copy of the Library.
     To do this, you must alter all the notices that refer to this
     License, so that they refer to the ordinary GNU General Public
     License, version 2, instead of to this License.  (If a newer
     version than version 2 of the ordinary GNU General Public License
     has appeared, then you can specify that version instead if you
     wish.)  Do not make any other change in these notices.

     Once this change is made in a given copy, it is irreversible for
     that copy, so the ordinary GNU General Public License applies to
     all subsequent copies and derivative works made from that copy.

     This option is useful when you wish to copy part of the code of
     the Library into a program that is not a library.

  4. You may copy and distribute the Library (or a portion or
     derivative of it, under Section 2) in object code or executable
     form under the terms of Sections 1 and 2 above provided that you
     accompany it with the complete corresponding machine-readable
     source code, which must be distributed under the terms of Sections
     1 and 2 above on a medium customarily used for software
     interchange.

     If distribution of object code is made by offering access to copy
     from a designated place, then offering equivalent access to copy
     the source code from the same place satisfies the requirement to
     distribute the source code, even though third parties are not
     compelled to copy the source along with the object code.

  5. A program that contains no derivative of any portion of the
     Library, but is designed to work with the Library by being
     compiled or linked with it, is called a "work that uses the
     Library".  Such a work, in isolation, is not a derivative work of
     the Library, and therefore falls outside the scope of this License.

     However, linking a "work that uses the Library" with the Library
     creates an executable that is a derivative of the Library (because
     it contains portions of the Library), rather than a "work that
     uses the library".  The executable is therefore covered by this
     License.  Section 6 states terms for distribution of such
     executables.

     When a "work that uses the Library" uses material from a header
     file that is part of the Library, the object code for the work may
     be a derivative work of the Library even though the source code is
     not.  Whether this is true is especially significant if the work
     can be linked without the Library, or if the work is itself a
     library.  The threshold for this to be true is not precisely
     defined by law.

     If such an object file uses only numerical parameters, data
     structure layouts and accessors, and small macros and small inline
     functions (ten lines or less in length), then the use of the object
     file is unrestricted, regardless of whether it is legally a
     derivative work.  (Executables containing this object code plus
     portions of the Library will still fall under Section 6.)

     Otherwise, if the work is a derivative of the Library, you may
     distribute the object code for the work under the terms of Section
     6.  Any executables containing that work also fall under Section 6,
     whether or not they are linked directly with the Library itself.

  6. As an exception to the Sections above, you may also compile or
     link a "work that uses the Library" with the Library to produce a
     work containing portions of the Library, and distribute that work
     under terms of your choice, provided that the terms permit
     modification of the work for the customer's own use and reverse
     engineering for debugging such modifications.

     You must give prominent notice with each copy of the work that the
     Library is used in it and that the Library and its use are covered
     by this License.  You must supply a copy of this License.  If the
     work during execution displays copyright notices, you must include
     the copyright notice for the Library among them, as well as a
     reference directing the user to the copy of this License.  Also,
     you must do one of these things:

       a. Accompany the work with the complete corresponding
          machine-readable source code for the Library including
          whatever changes were used in the work (which must be
          distributed under Sections 1 and 2 above); and, if the work
          is an executable linked with the Library, with the complete
          machine-readable "work that uses the Library", as object code
          and/or source code, so that the user can modify the Library
          and then relink to produce a modified executable containing
          the modified Library.  (It is understood that the user who
          changes the contents of definitions files in the Library will
          not necessarily be able to recompile the application to use
          the modified definitions.)

       b. Accompany the work with a written offer, valid for at least
          three years, to give the same user the materials specified in
          Subsection 6a, above, for a charge no more than the cost of
          performing this distribution.

       c. If distribution of the work is made by offering access to copy
          from a designated place, offer equivalent access to copy the
          above specified materials from the same place.

       d. Verify that the user has already received a copy of these
          materials or that you have already sent this user a copy.

     For an executable, the required form of the "work that uses the
     Library" must include any data and utility programs needed for
     reproducing the executable from it.  However, as a special
     exception, the source code distributed need not include anything
     that is normally distributed (in either source or binary form)
     with the major components (compiler, kernel, and so on) of the
     operating system on which the executable runs, unless that
     component itself accompanies the executable.

     It may happen that this requirement contradicts the license
     restrictions of other proprietary libraries that do not normally
     accompany the operating system.  Such a contradiction means you
     cannot use both them and the Library together in an executable
     that you distribute.

  7. You may place library facilities that are a work based on the
     Library side-by-side in a single library together with other
     library facilities not covered by this License, and distribute
     such a combined library, provided that the separate distribution
     of the work based on the Library and of the other library
     facilities is otherwise permitted, and provided that you do these
     two things:

       a. Accompany the combined library with a copy of the same work
          based on the Library, uncombined with any other library
          facilities.  This must be distributed under the terms of the
          Sections above.

       b. Give prominent notice with the combined library of the fact
          that part of it is a work based on the Library, and explaining
          where to find the accompanying uncombined form of the same
          work.

  8. You may not copy, modify, sublicense, link with, or distribute the
     Library except as expressly provided under this License.  Any
     attempt otherwise to copy, modify, sublicense, link with, or
     distribute the Library is void, and will automatically terminate
     your rights under this License.  However, parties who have
     received copies, or rights, from you under this License will not
     have their licenses terminated so long as such parties remain in
     full compliance.

  9. You are not required to accept this License, since you have not
     signed it.  However, nothing else grants you permission to modify
     or distribute the Library or its derivative works.  These actions
     are prohibited by law if you do not accept this License.
     Therefore, by modifying or distributing the Library (or any work
     based on the Library), you indicate your acceptance of this
     License to do so, and all its terms and conditions for copying,
     distributing or modifying the Library or works based on it.

 10. Each time you redistribute the Library (or any work based on the
     Library), the recipient automatically receives a license from the
     original licensor to copy, distribute, link with or modify the
     Library subject to these terms and conditions.  You may not impose
     any further restrictions on the recipients' exercise of the rights
     granted herein.  You are not responsible for enforcing compliance
     by third parties to this License.

 11. If, as a consequence of a court judgment or allegation of patent
     infringement or for any other reason (not limited to patent
     issues), conditions are imposed on you (whether by court order,
     agreement or otherwise) that contradict the conditions of this
     License, they do not excuse you from the conditions of this
     License.  If you cannot distribute so as to satisfy simultaneously
     your obligations under this License and any other pertinent
     obligations, then as a consequence you may not distribute the
     Library at all.  For example, if a patent license would not permit
     royalty-free redistribution of the Library by all those who
     receive copies directly or indirectly through you, then the only
     way you could satisfy both it and this License would be to refrain
     entirely from distribution of the Library.

     If any portion of this section is held invalid or unenforceable
     under any particular circumstance, the balance of the section is
     intended to apply, and the section as a whole is intended to apply
     in other circumstances.

     It is not the purpose of this section to induce you to infringe any
     patents or other property right claims or to contest validity of
     any such claims; this section has the sole purpose of protecting
     the integrity of the free software distribution system which is
     implemented by public license practices.  Many people have made
     generous contributions to the wide range of software distributed
     through that system in reliance on consistent application of that
     system; it is up to the author/donor to decide if he or she is
     willing to distribute software through any other system and a
     licensee cannot impose that choice.

     This section is intended to make thoroughly clear what is believed
     to be a consequence of the rest of this License.

 12. If the distribution and/or use of the Library is restricted in
     certain countries either by patents or by copyrighted interfaces,
     the original copyright holder who places the Library under this
     License may add an explicit geographical distribution limitation
     excluding those countries, so that distribution is permitted only
     in or among countries not thus excluded.  In such case, this
     License incorporates the limitation as if written in the body of
     this License.

 13. The Free Software Foundation may publish revised and/or new
     versions of the Library General Public License from time to time.
     Such new versions will be similar in spirit to the present version,
     but may differ in detail to address new problems or concerns.

     Each version is given a distinguishing version number.  If the
     Library specifies a version number of this License which applies
     to it and "any later version", you have the option of following
     the terms and conditions either of that version or of any later
     version published by the Free Software Foundation.  If the Library
     does not specify a license version number, you may choose any
     version ever published by the Free Software Foundation.

 14. If you wish to incorporate parts of the Library into other free
     programs whose distribution conditions are incompatible with these,
     write to the author to ask for permission.  For software which is
     copyrighted by the Free Software Foundation, write to the Free
     Software Foundation; we sometimes make exceptions for this.  Our
     decision will be guided by the two goals of preserving the free
     status of all derivatives of our free software and of promoting
     the sharing and reuse of software generally.

                                NO WARRANTY

 15. BECAUSE THE LIBRARY IS LICENSED FREE OF CHARGE, THERE IS NO
     WARRANTY FOR THE LIBRARY, TO THE EXTENT PERMITTED BY APPLICABLE
     LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
     HOLDERS AND/OR OTHER PARTIES PROVIDE THE LIBRARY "AS IS" WITHOUT
     WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT
     NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
     FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS TO THE
     QUALITY AND PERFORMANCE OF THE LIBRARY IS WITH YOU.  SHOULD THE
     LIBRARY PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY
     SERVICING, REPAIR OR CORRECTION.

 16. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN
     WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY
     MODIFY AND/OR REDISTRIBUTE THE LIBRARY AS PERMITTED ABOVE, BE
     LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL,
     INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR
     INABILITY TO USE THE LIBRARY (INCLUDING BUT NOT LIMITED TO LOSS OF
     DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU
     OR THIRD PARTIES OR A FAILURE OF THE LIBRARY TO OPERATE WITH ANY
     OTHER SOFTWARE), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN
     ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.

                      END OF TERMS AND CONDITIONS

How to Apply These Terms to Your New Libraries
==============================================

   If you develop a new library, and you want it to be of the greatest
possible use to the public, we recommend making it free software that
everyone can redistribute and change.  You can do so by permitting
redistribution under these terms (or, alternatively, under the terms of
the ordinary General Public License).

   To apply these terms, attach the following notices to the library.
It is safest to attach them to the start of each source file to most
effectively convey the exclusion of warranty; and each file should have
at least the "copyright" line and a pointer to where the full notice is
found.

     ONE LINE TO GIVE THE LIBRARY'S NAME AND AN IDEA OF WHAT IT DOES.
     Copyright (C) YEAR  NAME OF AUTHOR
     
     This library is free software; you can redistribute it and/or
     modify it under the terms of the GNU Library General Public
     License as published by the Free Software Foundation; either
     version 2 of the License, or (at your option) any later version.
     
     This library is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
     Library General Public License for more details.
     
     You should have received a copy of the GNU Library General Public
     License along with this library; if not, write to the
     Free Software Foundation, Inc., 59 Temple Place - Suite 330, Cambridge,
     MA 02139, USA.

   Also add information on how to contact you by electronic and paper
mail.

   You should also get your employer (if you work as a programmer) or
your school, if any, to sign a "copyright disclaimer" for the library,
if necessary.  Here is a sample; alter the names:

     Yoyodyne, Inc., hereby disclaims all copyright interest in
     the library `Frob' (a library for tweaking knobs) written
     by James Random Hacker.
     
     SIGNATURE OF TY COON, 1 April 1990
     Ty Coon, President of Vice

   That's all there is to it!

